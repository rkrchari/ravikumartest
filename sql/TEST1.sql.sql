
CREATE TABLE BASIC_DEPARTMENT
(
	DEPARTMENT_ID        INTEGER NOT NULL ,
	MERCHANDISE_CD       VARCHAR2(5) NULL ,
	DEPARTMENT_DESC      VARCHAR2(256) NULL 
);

CREATE UNIQUE INDEX XPKBASIC_DEPARTMENT ON BASIC_DEPARTMENT
(DEPARTMENT_ID   ASC);

ALTER TABLE BASIC_DEPARTMENT
	ADD CONSTRAINT  XPKBASIC_DEPARTMENT PRIMARY KEY (DEPARTMENT_ID);

CREATE TABLE BDM_DIM_LOCATION
(
	LOC_ID               NUMBER(7) NOT NULL ,
	LOC_DESC             VARCHAR2(33) NOT NULL ,
	LOC_LEVEL_NAME       VARCHAR2(20) NOT NULL ,
	STR_NBR              INTEGER NULL 
);

CREATE UNIQUE INDEX XPKBDM_DIM_LOCATION ON BDM_DIM_LOCATION
(LOC_ID   ASC);

ALTER TABLE BDM_DIM_LOCATION
	ADD CONSTRAINT  XPKBDM_DIM_LOCATION PRIMARY KEY (LOC_ID);

CREATE TABLE BDM_DIM_PERIOD
(
	PER_ID               NUMBER(5) NOT NULL ,
	PER_SCAN_DESC        VARCHAR2(15) NOT NULL ,
	PER_SCAN_LEVEL_NAME  VARCHAR2(20) NOT NULL ,
	AD_YR_PER_ID         NUMBER(5) NULL 
);

CREATE UNIQUE INDEX XPKBDM_DIM_PERIOD ON BDM_DIM_PERIOD
(PER_ID   ASC);

ALTER TABLE BDM_DIM_PERIOD
	ADD CONSTRAINT  XPKBDM_DIM_PERIOD PRIMARY KEY (PER_ID);

CREATE TABLE IKB_FIXTURE_MASTER
(
	FIXTURE_ID           INTEGER NOT NULL ,
	FIXTURE_DESC         CHAR(18) NULL ,
	FIXTURE_LENGTH       NUMBER(9,0) NULL ,
	FIXTURE_TYPE         VARCHAR2(18) NULL ,
	FIXTURE_HEIGHT       NUMBER(9,0) NULL ,
	REMARKS              VARCHAR2(50) NULL ,
	CREATE_ID            VARCHAR2(18) NULL ,
	CREATE_DTTM          TIMESTAMP NULL ,
	UPDATE_ID            VARCHAR2(18) NULL ,
	UPDATE_DTTM          TIMESTAMP NULL 
);

CREATE UNIQUE INDEX XPKIKB_FIXTURE_MASTER ON IKB_FIXTURE_MASTER
(FIXTURE_ID   ASC);

ALTER TABLE IKB_FIXTURE_MASTER
	ADD CONSTRAINT  XPKIKB_FIXTURE_MASTER PRIMARY KEY (FIXTURE_ID);

CREATE TABLE MSO_BATCH_REQ_PHASE_MASTER
(
	MSO_BATCH_REQ_PHASE_ID INTEGER NOT NULL ,
	CREATE_DTTM          TIMESTAMP NULL ,
	PHASE_DESCRIPTION    VARCHAR2(100) NULL ,
	CREATE_ID            VARCHAR2(20) NULL ,
	PHASE_CODE           VARCHAR2(18) NULL 
);

CREATE UNIQUE INDEX XPKMSO_BATCH_REQ_PHASE_MASTER ON MSO_BATCH_REQ_PHASE_MASTER
(MSO_BATCH_REQ_PHASE_ID   ASC);

ALTER TABLE MSO_BATCH_REQ_PHASE_MASTER
	ADD CONSTRAINT  XPKMSO_BATCH_REQ_PHASE_MASTER PRIMARY KEY (MSO_BATCH_REQ_PHASE_ID);

CREATE TABLE MSO_INSTANCE
(
	INSTANCE_ID          INTEGER NOT NULL ,
	CREATE_ID            VARCHAR2(20) NULL ,
	CREATE_DTTM          TIMESTAMP NULL ,
	UPDATE_ID            VARCHAR2(20) NULL ,
	UPDATE_DTTM          TIMESTAMP NULL ,
	MSO_PROJ_DATA_REQ_ID INTEGER NOT NULL ,
	OPTIMIZATION_TYPE    CHAR(18) NULL ,
	KPI_ID               INTEGER NOT NULL ,
	ZONE_NAME            VARCHAR2(25) NULL ,
	LOC_ID               NUMBER(7) NOT NULL ,
	PROJ_RULE_SETUP_ID   INTEGER NOT NULL ,
	ALLOW_PTB            CHAR(1) NULL ,
	INSTANCE_DESC        VARCHAR2(100) NULL ,
	ADDITIONAL_SPACE     NUMBER(18) NULL ,
	ABSOLUTE_SPACE       NUMBER(18) NULL 
);

CREATE UNIQUE INDEX XPKMSO_INSTANCE ON MSO_INSTANCE
(INSTANCE_ID   ASC);

ALTER TABLE MSO_INSTANCE
	ADD CONSTRAINT  XPKMSO_INSTANCE PRIMARY KEY (INSTANCE_ID);

CREATE TABLE MSO_INSTANCE_FIXT_RULES
(
	FIX_INSTANCE_RULE_ID INTEGER NOT NULL ,
	FIXTURE_ID           INTEGER NOT NULL ,
	FIXTURE_DESC         VARCHAR2(250) NULL ,
	FIXTURE_LENGTH       NUMBER(10) NULL ,
	FIXTURE_TYPE         VARCHAR2(15) NULL ,
	FIXTURE_HEIGHT       NUMBER(5) NULL ,
	REMARKS              VARCHAR2(100) NULL ,
	CREATE_ID            VARCHAR2(20) NULL ,
	CREATE_DTTM          TIMESTAMP NULL ,
	UPDATE_ID            VARCHAR2(20) NULL ,
	UPDATE_DTTM          TIMESTAMP NULL ,
	INSTANCE_ID          INTEGER NOT NULL 
);

CREATE UNIQUE INDEX XPKMSO_INSTANCE_FIXT_RULES ON MSO_INSTANCE_FIXT_RULES
(FIX_INSTANCE_RULE_ID   ASC);

ALTER TABLE MSO_INSTANCE_FIXT_RULES
	ADD CONSTRAINT  XPKMSO_INSTANCE_FIXT_RULES PRIMARY KEY (FIX_INSTANCE_RULE_ID);

CREATE TABLE MSO_INSTANCE_DEPT_CONST_RULES
(
	DEPT_CONST_INSTANCE_RULE_ID INTEGER NOT NULL ,
	FLEXDOWNBY           INTEGER NULL ,
	BUTNOTBELOW          INTEGER NULL ,
	FLEXUPBY             INTEGER NULL ,
	BUTNOTABOVE          INTEGER NULL ,
	CONSTRAINTS_UNITS    VARCHAR2(30) NULL ,
	SPACE_INCREMENTS     INTEGER NULL ,
	REMARKS              VARCHAR2(100) NULL ,
	CREATE_ID            VARCHAR2(20) NULL ,
	UPDATE_ID            VARCHAR2(20) NULL ,
	UPDATE_DTTM          TIMESTAMP NULL ,
	CREATE_DTTM          TIMESTAMP NULL ,
	DEPARTMENT_ID        INTEGER NOT NULL ,
	OBEY_POG_LIMIT       CHAR(1) NULL ,
	OBEY_CFW             CHAR(1) NULL ,
	INSTANCE_ID          INTEGER NOT NULL ,
	CURRENT_SPACE        NUMBER(16) NULL ,
	CURRENT_BENEFIT      NUMBER(16) NULL ,
	OPTIMAL_SPACE        NUMBER(16) NULL ,
	OPTIMAL_BENEFIT      NUMBER(16) NULL ,
	LIFT                 NUMBER(7) NULL ,
	CFWISSUED            CHAR(18) NULL 
);

CREATE UNIQUE INDEX XPKMSO_INSTANCE_DEPT_CONST_RUL ON MSO_INSTANCE_DEPT_CONST_RULES
(DEPT_CONST_INSTANCE_RULE_ID   ASC);

ALTER TABLE MSO_INSTANCE_DEPT_CONST_RULES
	ADD CONSTRAINT  XPKMSO_INSTANCE_DEPT_CONST_RUL PRIMARY KEY (DEPT_CONST_INSTANCE_RULE_ID);

CREATE TABLE MSO_PROJ
(
	MSO_PROJ_ID          INTEGER NOT NULL ,
	PROJECT_NAME         VARCHAR2(50) NULL ,
	PROJECT_DESC         VARCHAR2(250) NULL ,
	PROJECT_STATUS       VARCHAR2(15) NULL ,
	ACTIVE_IND           VARCHAR2(1) NULL ,
	PROJECT_DUE_DATE     DATE NULL ,
	CREATE_ID            VARCHAR2(20) NULL ,
	CREATE_DTTM          TIMESTAMP NULL ,
	UPDATE_ID            VARCHAR2(20) NULL ,
	UPDATE_DTTM          TIMESTAMP NULL ,
	PROJECT_TYPE         CHAR(18) NULL 
);

CREATE UNIQUE INDEX XPKMSO_PROJ ON MSO_PROJ
(MSO_PROJ_ID   ASC);

ALTER TABLE MSO_PROJ
	ADD CONSTRAINT  XPKMSO_PROJ PRIMARY KEY (MSO_PROJ_ID);

CREATE TABLE MSO_PROJECT_STORE
(
	PROJECT_STORE_ID     INTEGER NOT NULL ,
	CREATE_ID            VARCHAR2(18) NULL ,
	CREATE_DTTM          TIMESTAMP NULL ,
	MSO_PROJ_ID          INTEGER NOT NULL ,
	LOC_ID               NUMBER(7) NOT NULL 
);

CREATE UNIQUE INDEX XPKMSO_PROJECT_STORE ON MSO_PROJECT_STORE
(PROJECT_STORE_ID   ASC);

ALTER TABLE MSO_PROJECT_STORE
	ADD CONSTRAINT  XPKMSO_PROJECT_STORE PRIMARY KEY (PROJECT_STORE_ID);

CREATE TABLE MSO_PROJ_DATA_REQ
(
	MSO_PROJ_DATA_REQ_ID INTEGER NOT NULL ,
	MSO_DATA_REQ_ID      INTEGER NOT NULL ,
	MSO_PROJ_ID          INTEGER NOT NULL ,
	CREATE_ID            VARCHAR2(20) NULL ,
	CREATE_DTTM          TIMESTAMP NULL 
);

CREATE UNIQUE INDEX XPKMSO_PROJ_DATA_REQ ON MSO_PROJ_DATA_REQ
(MSO_PROJ_DATA_REQ_ID   ASC);

ALTER TABLE MSO_PROJ_DATA_REQ
	ADD CONSTRAINT  XPKMSO_PROJ_DATA_REQ PRIMARY KEY (MSO_PROJ_DATA_REQ_ID);

CREATE TABLE MSO_STATUS_MASTER
(
	STATUS_ID            INTEGER NOT NULL ,
	STATUS_CODE          VARCHAR2(15) NULL ,
	STATUS_DESCRIPTION   VARCHAR2(50) NULL ,
	CREATE_ID            VARCHAR2(18) NULL ,
	CREATE_DTTM          TIMESTAMP NULL 
);

CREATE UNIQUE INDEX XPKMSO_STATUS_MASTER ON MSO_STATUS_MASTER
(STATUS_ID   ASC);

ALTER TABLE MSO_STATUS_MASTER
	ADD CONSTRAINT  XPKMSO_STATUS_MASTER PRIMARY KEY (STATUS_ID);

CREATE TABLE MSO_BATCH_WRAPPER_DETL
(
	MSO_BATCH_WRAP_DETL_ID INTEGER NOT NULL ,
	CREATE_DTTM          TIMESTAMP NULL ,
	UPDATE_DTTM          TIMESTAMP NULL ,
	COMPLETION_DTTM      TIMESTAMP NULL ,
	CREATE_ID            VARCHAR2(20) NULL ,
	UPDATE_ID            VARCHAR2(20) NULL ,
	MSO_BATCH_REQ_PHASE_ID INTEGER NOT NULL ,
	REASON_CODE_DESC     VARCHAR2(100) NULL ,
	STATUS_ID            INTEGER NOT NULL ,
	MSO_DREQ_INSTANCE_ID INTEGER NULL ,
	ENTITY_TYPE          VARCHAR2(18) NULL 
);

CREATE UNIQUE INDEX XPKMSO_BATCH_WRAPPER_DETL ON MSO_BATCH_WRAPPER_DETL
(MSO_BATCH_WRAP_DETL_ID   ASC);

ALTER TABLE MSO_BATCH_WRAPPER_DETL
	ADD CONSTRAINT  XPKMSO_BATCH_WRAPPER_DETL PRIMARY KEY (MSO_BATCH_WRAP_DETL_ID);

CREATE TABLE MSO_DATA_REQ
(
	MSO_DATA_REQ_ID      INTEGER NOT NULL ,
	MSO_DATA_REQ_DESCRIPTION VARCHAR2(100) NULL ,
	CREATE_DTTM          TIMESTAMP NULL ,
	UPDATE_DTTM          TIMESTAMP NULL ,
	START_PER_ID         NUMBER(5) NOT NULL ,
	END_PER_ID           NUMBER(5) NOT NULL ,
	CREATE_ID            VARCHAR2(20) NOT NULL ,
	UPDATE_ID            VARCHAR2(20) NOT NULL ,
	DATA_REQ_DATE        DATE NOT NULL ,
	RUN_DATE             DATE NULL ,
	DATA_REQ_NAME        VARCHAR2(50) NULL ,
	COMMENTS             VARCHAR2(100) NULL 
);

CREATE UNIQUE INDEX XPKMSO_DATA_REQ ON MSO_DATA_REQ
(MSO_DATA_REQ_ID   ASC);

ALTER TABLE MSO_DATA_REQ
	ADD CONSTRAINT  XPKMSO_DATA_REQ PRIMARY KEY (MSO_DATA_REQ_ID);

CREATE TABLE MSO_DIM_KPI
(
	KPI_ID               INTEGER NOT NULL ,
	KPI_TYPE             VARCHAR2(15) NOT NULL ,
	KPI_CODE             VARCHAR2(15) NOT NULL ,
	KPI_DESC             VARCHAR2(50) NULL ,
	CREATE_ID            VARCHAR2(20) NULL ,
	CREATE_DTTM          TIMESTAMP NULL 
);

CREATE UNIQUE INDEX XPKMSO_DIM_KPI ON MSO_DIM_KPI
(KPI_ID   ASC);

ALTER TABLE MSO_DIM_KPI
	ADD CONSTRAINT  XPKMSO_DIM_KPI PRIMARY KEY (KPI_ID);

CREATE TABLE MSO_RULE_SETUP_MASTER
(
	RULE_SETUP_MASTER_ID INTEGER NOT NULL ,
	RULES_CATEGORY       CHAR(18) NOT NULL ,
	REMARKS              VARCHAR2(100) NULL ,
	CREATE_ID            VARCHAR2(20) NULL ,
	CREATE_DTTM          TIMESTAMP NULL ,
	FROM_DTTM            TIMESTAMP NULL ,
	TO_DTTM              TIMESTAMP NULL ,
	RULE_SETUP_DESCRIPTION INTEGER NULL ,
	RULE_SETUP_CODE      CHAR(18) NULL ,
	RULE_LEVEL_TYPE      VARCHAR2(18) NULL 
);

CREATE UNIQUE INDEX XPKMSO_RULE_SETUP_MASTER ON MSO_RULE_SETUP_MASTER
(RULE_SETUP_MASTER_ID   ASC);

ALTER TABLE MSO_RULE_SETUP_MASTER
	ADD CONSTRAINT  XPKMSO_RULE_SETUP_MASTER PRIMARY KEY (RULE_SETUP_MASTER_ID);

CREATE TABLE MSO_SEQ_MASTER_RULES
(
	MAST_SEQ_RULE_ID     INTEGER NOT NULL ,
	RANK                 INTEGER NOT NULL ,
	REMARKS              VARCHAR2(100) NULL ,
	CREATE_ID            VARCHAR2(20) NULL ,
	CREATE_DTTM          TIMESTAMP NULL ,
	UPDATE_ID            VARCHAR2(20) NULL ,
	UPDATE_DTTM          TIMESTAMP NULL ,
	FROM_DTTM            TIMESTAMP NULL ,
	TO_DTTM              TIMESTAMP NULL ,
	DEPARTMENT_ID        INTEGER NOT NULL ,
	RULE_SETUP_MASTER_ID INTEGER NOT NULL 
);

CREATE UNIQUE INDEX XPKMSO_SEQ_MASTER_RULES ON MSO_SEQ_MASTER_RULES
(MAST_SEQ_RULE_ID   ASC);

ALTER TABLE MSO_SEQ_MASTER_RULES
	ADD CONSTRAINT  XPKMSO_SEQ_MASTER_RULES PRIMARY KEY (MAST_SEQ_RULE_ID);

CREATE TABLE MSO_DEPT_CONST_MASTER_RULES
(
	DEPT_MAST_CONST_RULE_ID INTEGER NOT NULL ,
	FLEXDOWNBY           INTEGER NULL ,
	BUTNOTBELOW          INTEGER NULL ,
	FLEXUPBY             INTEGER NULL ,
	BUTNOTABOVE          INTEGER NULL ,
	CONSTRAINTS_UNITS    VARCHAR2(30) NULL ,
	SPACE_INCREMENTS     INTEGER NULL ,
	REMARKS              VARCHAR2(100) NULL ,
	CREATE_ID            VARCHAR2(20) NULL ,
	CREATE_DTTM          TIMESTAMP NULL ,
	UPDATE_ID            VARCHAR2(20) NULL ,
	UPDATE_DTTM          TIMESTAMP NULL ,
	FROM_DTTM            TIMESTAMP NULL ,
	TO_DTTM              TIMESTAMP NULL ,
	DEPARTMENT_ID        INTEGER NOT NULL ,
	RULE_SETUP_MASTER_ID INTEGER NOT NULL ,
	OBEY_POG_LIMIT       CHAR(1) NULL ,
	OBEY_CFW             CHAR(1) NULL 
);

CREATE UNIQUE INDEX XPKMSO_DEPT_CONST_MASTER_RULES ON MSO_DEPT_CONST_MASTER_RULES
(DEPT_MAST_CONST_RULE_ID   ASC);

ALTER TABLE MSO_DEPT_CONST_MASTER_RULES
	ADD CONSTRAINT  XPKMSO_DEPT_CONST_MASTER_RULES PRIMARY KEY (DEPT_MAST_CONST_RULE_ID);

CREATE TABLE MSO_PROJECT_RULE_SETUP_ASSOC
(
	PROJ_RULE_SETUP_ID   INTEGER NOT NULL ,
	REMARKS              VARCHAR2(100) NULL ,
	CREATE_ID            VARCHAR2(20) NULL ,
	CREATE_DTTM          TIMESTAMP NULL ,
	MSO_PROJ_ID          INTEGER NOT NULL ,
	RULE_SETUP_MASTER_ID INTEGER NOT NULL 
);

CREATE UNIQUE INDEX XPKMSO_PROJECT_RULE_SETUP_ASSO ON MSO_PROJECT_RULE_SETUP_ASSOC
(PROJ_RULE_SETUP_ID   ASC);

ALTER TABLE MSO_PROJECT_RULE_SETUP_ASSOC
	ADD CONSTRAINT  XPKMSO_PROJECT_RULE_SETUP_ASSO PRIMARY KEY (PROJ_RULE_SETUP_ID);

CREATE TABLE MSO_USER_MASTER
(
	MSO_USER_ID          VARCHAR2(20) NOT NULL ,
	CREATE_DTTM          TIMESTAMP NULL ,
	FROM_DTTM            TIMESTAMP NULL ,
	TO_DTTM              TIMESTAMP NULL ,
	USER_FIRST_NAME      VARCHAR(20) NULL ,
	USER_LAST_NAME       VARCHAR(20) NULL ,
	USER_CODE            VARCHAR2(7) NULL ,
	CREATE_ID            VARCHAR2(20) NULL ,
	USER_ROLE            VARCHAR(10) NULL 
);

CREATE UNIQUE INDEX XPKMSO_USER_MASTER ON MSO_USER_MASTER
(MSO_USER_ID   ASC);

ALTER TABLE MSO_USER_MASTER
	ADD CONSTRAINT  XPKMSO_USER_MASTER PRIMARY KEY (MSO_USER_ID);

CREATE TABLE MSO_SHARD_FIX_MASTER_RULES
(
	SHARED_FIX_MAST_RULE_ID INTEGER NOT NULL ,
	REMARKS              VARCHAR2(100) NULL ,
	CREATE_ID            VARCHAR2(20) NULL ,
	CREATE_DTTM          TIMESTAMP NULL ,
	UPDATE_ID            VARCHAR2(20) NULL ,
	UPDATE_DTTM          TIMESTAMP NULL ,
	FROM_DTTM            DATE NULL ,
	TO_DTTM              DATE NULL ,
	ADJ_DEPT_ID          INTEGER NULL ,
	DEPARTMENT_ID        INTEGER NOT NULL ,
	RULE_SETUP_MASTER_ID INTEGER NOT NULL 
);

CREATE UNIQUE INDEX XPKMSO_SHARD_FIX_MASTER_RULES ON MSO_SHARD_FIX_MASTER_RULES
(SHARED_FIX_MAST_RULE_ID   ASC);

ALTER TABLE MSO_SHARD_FIX_MASTER_RULES
	ADD CONSTRAINT  XPKMSO_SHARD_FIX_MASTER_RULES PRIMARY KEY (SHARED_FIX_MAST_RULE_ID);

CREATE TABLE MSO_INSTANCE_SHARED_FIXT_RULES
(
	SHARED_FIX_INSTANCE_RULE_ID INTEGER NOT NULL ,
	REMARKS              VARCHAR2(100) NULL ,
	CREATE_ID            VARCHAR2(20) NULL ,
	CREATE_DTTM          TIMESTAMP NULL ,
	UPDATE_ID            VARCHAR2(20) NULL ,
	UPDATE_DTTM          TIMESTAMP NULL ,
	ADJ_DEP_ID           INTEGER NOT NULL ,
	DEPARTMENT_ID        INTEGER NOT NULL ,
	INSTANCE_ID          INTEGER NOT NULL 
);

CREATE UNIQUE INDEX XPKMSO_INSTANCE_SHARED_FIXT_RU ON MSO_INSTANCE_SHARED_FIXT_RULES
(SHARED_FIX_INSTANCE_RULE_ID   ASC);

ALTER TABLE MSO_INSTANCE_SHARED_FIXT_RULES
	ADD CONSTRAINT  XPKMSO_INSTANCE_SHARED_FIXT_RU PRIMARY KEY (SHARED_FIX_INSTANCE_RULE_ID);

CREATE TABLE MSO_INSTANCE_FIXT_COMPBTY
(
	INSTANCE_FIX_COMPBTY_RULE_ID INTEGER NOT NULL ,
	REMARKS              VARCHAR2(100) NULL ,
	CREATE_ID            VARCHAR2(20) NULL ,
	CREATE_DTTM          TIMESTAMP NULL ,
	UPDATE_ID            VARCHAR2(20) NULL ,
	UPDATE_DTTM          TIMESTAMP NULL ,
	MAND_FIXTURE_ID      INTEGER NOT NULL ,
	FORBID_FIXTURE_ID    INTEGER NOT NULL ,
	DEPARTMENT_ID        INTEGER NOT NULL ,
	INSTANCE_ID          INTEGER NOT NULL 
);

CREATE UNIQUE INDEX XPKMSO_INSTANCE_FIXT_COMPBTY ON MSO_INSTANCE_FIXT_COMPBTY
(INSTANCE_FIX_COMPBTY_RULE_ID   ASC);

ALTER TABLE MSO_INSTANCE_FIXT_COMPBTY
	ADD CONSTRAINT  XPKMSO_INSTANCE_FIXT_COMPBTY PRIMARY KEY (INSTANCE_FIX_COMPBTY_RULE_ID);

ALTER TABLE MSO_INSTANCE
	ADD (CONSTRAINT R_76 FOREIGN KEY (MSO_PROJ_DATA_REQ_ID) REFERENCES MSO_PROJ_DATA_REQ (MSO_PROJ_DATA_REQ_ID));

ALTER TABLE MSO_INSTANCE
	ADD (CONSTRAINT R_89 FOREIGN KEY (KPI_ID) REFERENCES MSO_DIM_KPI (KPI_ID));

ALTER TABLE MSO_INSTANCE
	ADD (CONSTRAINT R_118 FOREIGN KEY (LOC_ID) REFERENCES BDM_DIM_LOCATION (LOC_ID));

ALTER TABLE MSO_INSTANCE
	ADD (CONSTRAINT R_152 FOREIGN KEY (PROJ_RULE_SETUP_ID) REFERENCES MSO_PROJECT_RULE_SETUP_ASSOC (PROJ_RULE_SETUP_ID));

ALTER TABLE MSO_INSTANCE_FIXT_RULES
	ADD (CONSTRAINT R_29 FOREIGN KEY (FIXTURE_ID) REFERENCES IKB_FIXTURE_MASTER (FIXTURE_ID));

ALTER TABLE MSO_INSTANCE_FIXT_RULES
	ADD (CONSTRAINT R_156 FOREIGN KEY (INSTANCE_ID) REFERENCES MSO_INSTANCE (INSTANCE_ID));

ALTER TABLE MSO_INSTANCE_DEPT_CONST_RULES
	ADD (CONSTRAINT R_41 FOREIGN KEY (DEPARTMENT_ID) REFERENCES BASIC_DEPARTMENT (DEPARTMENT_ID));

ALTER TABLE MSO_INSTANCE_DEPT_CONST_RULES
	ADD (CONSTRAINT R_158 FOREIGN KEY (INSTANCE_ID) REFERENCES MSO_INSTANCE (INSTANCE_ID));

ALTER TABLE MSO_PROJECT_STORE
	ADD (CONSTRAINT R_145 FOREIGN KEY (MSO_PROJ_ID) REFERENCES MSO_PROJ (MSO_PROJ_ID));

ALTER TABLE MSO_PROJECT_STORE
	ADD (CONSTRAINT R_146 FOREIGN KEY (LOC_ID) REFERENCES BDM_DIM_LOCATION (LOC_ID));

ALTER TABLE MSO_PROJ_DATA_REQ
	ADD (CONSTRAINT R_69 FOREIGN KEY (MSO_DATA_REQ_ID) REFERENCES MSO_DATA_REQ (MSO_DATA_REQ_ID));

ALTER TABLE MSO_PROJ_DATA_REQ
	ADD (CONSTRAINT R_70 FOREIGN KEY (MSO_PROJ_ID) REFERENCES MSO_PROJ (MSO_PROJ_ID));

ALTER TABLE MSO_BATCH_WRAPPER_DETL
	ADD (CONSTRAINT R_151 FOREIGN KEY (MSO_BATCH_REQ_PHASE_ID) REFERENCES MSO_BATCH_REQ_PHASE_MASTER (MSO_BATCH_REQ_PHASE_ID));

ALTER TABLE MSO_BATCH_WRAPPER_DETL
	ADD (CONSTRAINT R_154 FOREIGN KEY (STATUS_ID) REFERENCES MSO_STATUS_MASTER (STATUS_ID));

ALTER TABLE MSO_DATA_REQ
	ADD (CONSTRAINT R_59 FOREIGN KEY (START_PER_ID) REFERENCES BDM_DIM_PERIOD (PER_ID));

ALTER TABLE MSO_DATA_REQ
	ADD (CONSTRAINT R_60 FOREIGN KEY (END_PER_ID) REFERENCES BDM_DIM_PERIOD (PER_ID));

ALTER TABLE MSO_DATA_REQ
	ADD (CONSTRAINT R_148 FOREIGN KEY (CREATE_ID) REFERENCES MSO_USER_MASTER (MSO_USER_ID));

ALTER TABLE MSO_DATA_REQ
	ADD (CONSTRAINT R_149 FOREIGN KEY (UPDATE_ID) REFERENCES MSO_USER_MASTER (MSO_USER_ID));

ALTER TABLE MSO_SEQ_MASTER_RULES
	ADD (CONSTRAINT R_30 FOREIGN KEY (DEPARTMENT_ID) REFERENCES BASIC_DEPARTMENT (DEPARTMENT_ID));

ALTER TABLE MSO_SEQ_MASTER_RULES
	ADD (CONSTRAINT R_141 FOREIGN KEY (RULE_SETUP_MASTER_ID) REFERENCES MSO_RULE_SETUP_MASTER (RULE_SETUP_MASTER_ID));

ALTER TABLE MSO_DEPT_CONST_MASTER_RULES
	ADD (CONSTRAINT R_13 FOREIGN KEY (DEPARTMENT_ID) REFERENCES BASIC_DEPARTMENT (DEPARTMENT_ID));

ALTER TABLE MSO_DEPT_CONST_MASTER_RULES
	ADD (CONSTRAINT R_142 FOREIGN KEY (RULE_SETUP_MASTER_ID) REFERENCES MSO_RULE_SETUP_MASTER (RULE_SETUP_MASTER_ID));

ALTER TABLE MSO_PROJECT_RULE_SETUP_ASSOC
	ADD (CONSTRAINT R_139 FOREIGN KEY (MSO_PROJ_ID) REFERENCES MSO_PROJ (MSO_PROJ_ID));

ALTER TABLE MSO_PROJECT_RULE_SETUP_ASSOC
	ADD (CONSTRAINT R_140 FOREIGN KEY (RULE_SETUP_MASTER_ID) REFERENCES MSO_RULE_SETUP_MASTER (RULE_SETUP_MASTER_ID));

ALTER TABLE MSO_SHARD_FIX_MASTER_RULES
	ADD (CONSTRAINT R_15 FOREIGN KEY (ADJ_DEPT_ID) REFERENCES BASIC_DEPARTMENT (DEPARTMENT_ID) ON DELETE SET NULL);

ALTER TABLE MSO_SHARD_FIX_MASTER_RULES
	ADD (CONSTRAINT R_40 FOREIGN KEY (DEPARTMENT_ID) REFERENCES BASIC_DEPARTMENT (DEPARTMENT_ID));

ALTER TABLE MSO_SHARD_FIX_MASTER_RULES
	ADD (CONSTRAINT R_144 FOREIGN KEY (RULE_SETUP_MASTER_ID) REFERENCES MSO_RULE_SETUP_MASTER (RULE_SETUP_MASTER_ID));

ALTER TABLE MSO_INSTANCE_SHARED_FIXT_RULES
	ADD (CONSTRAINT R_39 FOREIGN KEY (ADJ_DEP_ID) REFERENCES BASIC_DEPARTMENT (DEPARTMENT_ID));

ALTER TABLE MSO_INSTANCE_SHARED_FIXT_RULES
	ADD (CONSTRAINT R_58 FOREIGN KEY (DEPARTMENT_ID) REFERENCES BASIC_DEPARTMENT (DEPARTMENT_ID));

ALTER TABLE MSO_INSTANCE_SHARED_FIXT_RULES
	ADD (CONSTRAINT R_155 FOREIGN KEY (INSTANCE_ID) REFERENCES MSO_INSTANCE (INSTANCE_ID));

ALTER TABLE MSO_INSTANCE_FIXT_COMPBTY
	ADD (CONSTRAINT R_44 FOREIGN KEY (DEPARTMENT_ID) REFERENCES BASIC_DEPARTMENT (DEPARTMENT_ID));

ALTER TABLE MSO_INSTANCE_FIXT_COMPBTY
	ADD (CONSTRAINT R_45 FOREIGN KEY (MAND_FIXTURE_ID) REFERENCES IKB_FIXTURE_MASTER (FIXTURE_ID));

ALTER TABLE MSO_INSTANCE_FIXT_COMPBTY
	ADD (CONSTRAINT R_47 FOREIGN KEY (FORBID_FIXTURE_ID) REFERENCES IKB_FIXTURE_MASTER (FIXTURE_ID));

ALTER TABLE MSO_INSTANCE_FIXT_COMPBTY
	ADD (CONSTRAINT R_157 FOREIGN KEY (INSTANCE_ID) REFERENCES MSO_INSTANCE (INSTANCE_ID));

CREATE  TRIGGER  tD_BASIC_DEPARTMENT AFTER DELETE ON BASIC_DEPARTMENT for each row
-- ERwin Builtin Trigger
-- DELETE trigger on BASIC_DEPARTMENT 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* BASIC_DEPARTMENT  MSO_INSTANCE_SHARED_FIXT_RULES on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="000943ec", PARENT_OWNER="", PARENT_TABLE="BASIC_DEPARTMENT"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE_SHARED_FIXT_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_58", FK_COLUMNS="DEPARTMENT_ID" */
    SELECT count(*) INTO NUMROWS
      FROM MSO_INSTANCE_SHARED_FIXT_RULES
      WHERE
        /*  %JoinFKPK(MSO_INSTANCE_SHARED_FIXT_RULES,:%Old," = "," AND") */
        MSO_INSTANCE_SHARED_FIXT_RULES.DEPARTMENT_ID = :old.DEPARTMENT_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete BASIC_DEPARTMENT because MSO_INSTANCE_SHARED_FIXT_RULES exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* BASIC_DEPARTMENT  MSO_INSTANCE_FIXT_COMPBTY on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BASIC_DEPARTMENT"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE_FIXT_COMPBTY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_44", FK_COLUMNS="DEPARTMENT_ID" */
    SELECT count(*) INTO NUMROWS
      FROM MSO_INSTANCE_FIXT_COMPBTY
      WHERE
        /*  %JoinFKPK(MSO_INSTANCE_FIXT_COMPBTY,:%Old," = "," AND") */
        MSO_INSTANCE_FIXT_COMPBTY.DEPARTMENT_ID = :old.DEPARTMENT_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete BASIC_DEPARTMENT because MSO_INSTANCE_FIXT_COMPBTY exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* BASIC_DEPARTMENT  MSO_SHARD_FIX_MASTER_RULES on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BASIC_DEPARTMENT"
    CHILD_OWNER="", CHILD_TABLE="MSO_SHARD_FIX_MASTER_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_40", FK_COLUMNS="DEPARTMENT_ID" */
    SELECT count(*) INTO NUMROWS
      FROM MSO_SHARD_FIX_MASTER_RULES
      WHERE
        /*  %JoinFKPK(MSO_SHARD_FIX_MASTER_RULES,:%Old," = "," AND") */
        MSO_SHARD_FIX_MASTER_RULES.DEPARTMENT_ID = :old.DEPARTMENT_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete BASIC_DEPARTMENT because MSO_SHARD_FIX_MASTER_RULES exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* BASIC_DEPARTMENT  MSO_INSTANCE_DEPT_CONST_RULES on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BASIC_DEPARTMENT"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE_DEPT_CONST_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_41", FK_COLUMNS="DEPARTMENT_ID" */
    SELECT count(*) INTO NUMROWS
      FROM MSO_INSTANCE_DEPT_CONST_RULES
      WHERE
        /*  %JoinFKPK(MSO_INSTANCE_DEPT_CONST_RULES,:%Old," = "," AND") */
        MSO_INSTANCE_DEPT_CONST_RULES.DEPARTMENT_ID = :old.DEPARTMENT_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete BASIC_DEPARTMENT because MSO_INSTANCE_DEPT_CONST_RULES exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* BASIC_DEPARTMENT  MSO_INSTANCE_SHARED_FIXT_RULES on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BASIC_DEPARTMENT"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE_SHARED_FIXT_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_39", FK_COLUMNS="ADJ_DEP_ID" */
    SELECT count(*) INTO NUMROWS
      FROM MSO_INSTANCE_SHARED_FIXT_RULES
      WHERE
        /*  %JoinFKPK(MSO_INSTANCE_SHARED_FIXT_RULES,:%Old," = "," AND") */
        MSO_INSTANCE_SHARED_FIXT_RULES.ADJ_DEP_ID = :old.DEPARTMENT_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete BASIC_DEPARTMENT because MSO_INSTANCE_SHARED_FIXT_RULES exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* BASIC_DEPARTMENT  MSO_SEQ_MASTER_RULES on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BASIC_DEPARTMENT"
    CHILD_OWNER="", CHILD_TABLE="MSO_SEQ_MASTER_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_30", FK_COLUMNS="DEPARTMENT_ID" */
    SELECT count(*) INTO NUMROWS
      FROM MSO_SEQ_MASTER_RULES
      WHERE
        /*  %JoinFKPK(MSO_SEQ_MASTER_RULES,:%Old," = "," AND") */
        MSO_SEQ_MASTER_RULES.DEPARTMENT_ID = :old.DEPARTMENT_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete BASIC_DEPARTMENT because MSO_SEQ_MASTER_RULES exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* BASIC_DEPARTMENT  MSO_SHARD_FIX_MASTER_RULES on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BASIC_DEPARTMENT"
    CHILD_OWNER="", CHILD_TABLE="MSO_SHARD_FIX_MASTER_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_15", FK_COLUMNS="ADJ_DEPT_ID" */
    UPDATE MSO_SHARD_FIX_MASTER_RULES
      SET
        /* %SetFK(MSO_SHARD_FIX_MASTER_RULES,NULL) */
        MSO_SHARD_FIX_MASTER_RULES.ADJ_DEPT_ID = NULL
      WHERE
        /* %JoinFKPK(MSO_SHARD_FIX_MASTER_RULES,:%Old," = "," AND") */
        MSO_SHARD_FIX_MASTER_RULES.ADJ_DEPT_ID = :old.DEPARTMENT_ID;

    /* ERwin Builtin Trigger */
    /* BASIC_DEPARTMENT  MSO_DEPT_CONST_MASTER_RULES on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BASIC_DEPARTMENT"
    CHILD_OWNER="", CHILD_TABLE="MSO_DEPT_CONST_MASTER_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_13", FK_COLUMNS="DEPARTMENT_ID" */
    SELECT count(*) INTO NUMROWS
      FROM MSO_DEPT_CONST_MASTER_RULES
      WHERE
        /*  %JoinFKPK(MSO_DEPT_CONST_MASTER_RULES,:%Old," = "," AND") */
        MSO_DEPT_CONST_MASTER_RULES.DEPARTMENT_ID = :old.DEPARTMENT_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete BASIC_DEPARTMENT because MSO_DEPT_CONST_MASTER_RULES exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_BASIC_DEPARTMENT AFTER UPDATE ON BASIC_DEPARTMENT for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on BASIC_DEPARTMENT 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* BASIC_DEPARTMENT  MSO_INSTANCE_SHARED_FIXT_RULES on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="000ad1cc", PARENT_OWNER="", PARENT_TABLE="BASIC_DEPARTMENT"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE_SHARED_FIXT_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_58", FK_COLUMNS="DEPARTMENT_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.DEPARTMENT_ID <> :new.DEPARTMENT_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM MSO_INSTANCE_SHARED_FIXT_RULES
      WHERE
        /*  %JoinFKPK(MSO_INSTANCE_SHARED_FIXT_RULES,:%Old," = "," AND") */
        MSO_INSTANCE_SHARED_FIXT_RULES.DEPARTMENT_ID = :old.DEPARTMENT_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update BASIC_DEPARTMENT because MSO_INSTANCE_SHARED_FIXT_RULES exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* BASIC_DEPARTMENT  MSO_INSTANCE_FIXT_COMPBTY on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BASIC_DEPARTMENT"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE_FIXT_COMPBTY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_44", FK_COLUMNS="DEPARTMENT_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.DEPARTMENT_ID <> :new.DEPARTMENT_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM MSO_INSTANCE_FIXT_COMPBTY
      WHERE
        /*  %JoinFKPK(MSO_INSTANCE_FIXT_COMPBTY,:%Old," = "," AND") */
        MSO_INSTANCE_FIXT_COMPBTY.DEPARTMENT_ID = :old.DEPARTMENT_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update BASIC_DEPARTMENT because MSO_INSTANCE_FIXT_COMPBTY exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* BASIC_DEPARTMENT  MSO_SHARD_FIX_MASTER_RULES on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BASIC_DEPARTMENT"
    CHILD_OWNER="", CHILD_TABLE="MSO_SHARD_FIX_MASTER_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_40", FK_COLUMNS="DEPARTMENT_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.DEPARTMENT_ID <> :new.DEPARTMENT_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM MSO_SHARD_FIX_MASTER_RULES
      WHERE
        /*  %JoinFKPK(MSO_SHARD_FIX_MASTER_RULES,:%Old," = "," AND") */
        MSO_SHARD_FIX_MASTER_RULES.DEPARTMENT_ID = :old.DEPARTMENT_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update BASIC_DEPARTMENT because MSO_SHARD_FIX_MASTER_RULES exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* BASIC_DEPARTMENT  MSO_INSTANCE_DEPT_CONST_RULES on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BASIC_DEPARTMENT"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE_DEPT_CONST_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_41", FK_COLUMNS="DEPARTMENT_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.DEPARTMENT_ID <> :new.DEPARTMENT_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM MSO_INSTANCE_DEPT_CONST_RULES
      WHERE
        /*  %JoinFKPK(MSO_INSTANCE_DEPT_CONST_RULES,:%Old," = "," AND") */
        MSO_INSTANCE_DEPT_CONST_RULES.DEPARTMENT_ID = :old.DEPARTMENT_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update BASIC_DEPARTMENT because MSO_INSTANCE_DEPT_CONST_RULES exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* BASIC_DEPARTMENT  MSO_INSTANCE_SHARED_FIXT_RULES on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BASIC_DEPARTMENT"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE_SHARED_FIXT_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_39", FK_COLUMNS="ADJ_DEP_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.DEPARTMENT_ID <> :new.DEPARTMENT_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM MSO_INSTANCE_SHARED_FIXT_RULES
      WHERE
        /*  %JoinFKPK(MSO_INSTANCE_SHARED_FIXT_RULES,:%Old," = "," AND") */
        MSO_INSTANCE_SHARED_FIXT_RULES.ADJ_DEP_ID = :old.DEPARTMENT_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update BASIC_DEPARTMENT because MSO_INSTANCE_SHARED_FIXT_RULES exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* BASIC_DEPARTMENT  MSO_SEQ_MASTER_RULES on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BASIC_DEPARTMENT"
    CHILD_OWNER="", CHILD_TABLE="MSO_SEQ_MASTER_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_30", FK_COLUMNS="DEPARTMENT_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.DEPARTMENT_ID <> :new.DEPARTMENT_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM MSO_SEQ_MASTER_RULES
      WHERE
        /*  %JoinFKPK(MSO_SEQ_MASTER_RULES,:%Old," = "," AND") */
        MSO_SEQ_MASTER_RULES.DEPARTMENT_ID = :old.DEPARTMENT_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update BASIC_DEPARTMENT because MSO_SEQ_MASTER_RULES exists.'
      );
    END IF;
  END IF;

  /* BASIC_DEPARTMENT  MSO_SHARD_FIX_MASTER_RULES on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BASIC_DEPARTMENT"
    CHILD_OWNER="", CHILD_TABLE="MSO_SHARD_FIX_MASTER_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_15", FK_COLUMNS="ADJ_DEPT_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.DEPARTMENT_ID <> :new.DEPARTMENT_ID
  THEN
    UPDATE MSO_SHARD_FIX_MASTER_RULES
      SET
        /* %SetFK(MSO_SHARD_FIX_MASTER_RULES,NULL) */
        MSO_SHARD_FIX_MASTER_RULES.ADJ_DEPT_ID = NULL
      WHERE
        /* %JoinFKPK(MSO_SHARD_FIX_MASTER_RULES,:%Old," = ",",") */
        MSO_SHARD_FIX_MASTER_RULES.ADJ_DEPT_ID = :old.DEPARTMENT_ID;
  END IF;

  /* ERwin Builtin Trigger */
  /* BASIC_DEPARTMENT  MSO_DEPT_CONST_MASTER_RULES on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BASIC_DEPARTMENT"
    CHILD_OWNER="", CHILD_TABLE="MSO_DEPT_CONST_MASTER_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_13", FK_COLUMNS="DEPARTMENT_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.DEPARTMENT_ID <> :new.DEPARTMENT_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM MSO_DEPT_CONST_MASTER_RULES
      WHERE
        /*  %JoinFKPK(MSO_DEPT_CONST_MASTER_RULES,:%Old," = "," AND") */
        MSO_DEPT_CONST_MASTER_RULES.DEPARTMENT_ID = :old.DEPARTMENT_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update BASIC_DEPARTMENT because MSO_DEPT_CONST_MASTER_RULES exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_BDM_DIM_LOCATION AFTER DELETE ON BDM_DIM_LOCATION for each row
-- ERwin Builtin Trigger
-- DELETE trigger on BDM_DIM_LOCATION 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* BDM_DIM_LOCATION  MSO_PROJECT_STORE on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="0001ee34", PARENT_OWNER="", PARENT_TABLE="BDM_DIM_LOCATION"
    CHILD_OWNER="", CHILD_TABLE="MSO_PROJECT_STORE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_146", FK_COLUMNS="LOC_ID" */
    SELECT count(*) INTO NUMROWS
      FROM MSO_PROJECT_STORE
      WHERE
        /*  %JoinFKPK(MSO_PROJECT_STORE,:%Old," = "," AND") */
        MSO_PROJECT_STORE.LOC_ID = :old.LOC_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete BDM_DIM_LOCATION because MSO_PROJECT_STORE exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* BDM_DIM_LOCATION  MSO_INSTANCE on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BDM_DIM_LOCATION"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_118", FK_COLUMNS="LOC_ID" */
    SELECT count(*) INTO NUMROWS
      FROM MSO_INSTANCE
      WHERE
        /*  %JoinFKPK(MSO_INSTANCE,:%Old," = "," AND") */
        MSO_INSTANCE.LOC_ID = :old.LOC_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete BDM_DIM_LOCATION because MSO_INSTANCE exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_BDM_DIM_LOCATION AFTER UPDATE ON BDM_DIM_LOCATION for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on BDM_DIM_LOCATION 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* BDM_DIM_LOCATION  MSO_PROJECT_STORE on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00022dab", PARENT_OWNER="", PARENT_TABLE="BDM_DIM_LOCATION"
    CHILD_OWNER="", CHILD_TABLE="MSO_PROJECT_STORE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_146", FK_COLUMNS="LOC_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.LOC_ID <> :new.LOC_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM MSO_PROJECT_STORE
      WHERE
        /*  %JoinFKPK(MSO_PROJECT_STORE,:%Old," = "," AND") */
        MSO_PROJECT_STORE.LOC_ID = :old.LOC_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update BDM_DIM_LOCATION because MSO_PROJECT_STORE exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* BDM_DIM_LOCATION  MSO_INSTANCE on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BDM_DIM_LOCATION"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_118", FK_COLUMNS="LOC_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.LOC_ID <> :new.LOC_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM MSO_INSTANCE
      WHERE
        /*  %JoinFKPK(MSO_INSTANCE,:%Old," = "," AND") */
        MSO_INSTANCE.LOC_ID = :old.LOC_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update BDM_DIM_LOCATION because MSO_INSTANCE exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_BDM_DIM_PERIOD AFTER DELETE ON BDM_DIM_PERIOD for each row
-- ERwin Builtin Trigger
-- DELETE trigger on BDM_DIM_PERIOD 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* BDM_DIM_PERIOD  MSO_DATA_REQ on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="0001dff4", PARENT_OWNER="", PARENT_TABLE="BDM_DIM_PERIOD"
    CHILD_OWNER="", CHILD_TABLE="MSO_DATA_REQ"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_60", FK_COLUMNS="END_PER_ID" */
    SELECT count(*) INTO NUMROWS
      FROM MSO_DATA_REQ
      WHERE
        /*  %JoinFKPK(MSO_DATA_REQ,:%Old," = "," AND") */
        MSO_DATA_REQ.END_PER_ID = :old.PER_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete BDM_DIM_PERIOD because MSO_DATA_REQ exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* BDM_DIM_PERIOD  MSO_DATA_REQ on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BDM_DIM_PERIOD"
    CHILD_OWNER="", CHILD_TABLE="MSO_DATA_REQ"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_59", FK_COLUMNS="START_PER_ID" */
    SELECT count(*) INTO NUMROWS
      FROM MSO_DATA_REQ
      WHERE
        /*  %JoinFKPK(MSO_DATA_REQ,:%Old," = "," AND") */
        MSO_DATA_REQ.START_PER_ID = :old.PER_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete BDM_DIM_PERIOD because MSO_DATA_REQ exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_BDM_DIM_PERIOD AFTER UPDATE ON BDM_DIM_PERIOD for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on BDM_DIM_PERIOD 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* BDM_DIM_PERIOD  MSO_DATA_REQ on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00022997", PARENT_OWNER="", PARENT_TABLE="BDM_DIM_PERIOD"
    CHILD_OWNER="", CHILD_TABLE="MSO_DATA_REQ"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_60", FK_COLUMNS="END_PER_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.PER_ID <> :new.PER_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM MSO_DATA_REQ
      WHERE
        /*  %JoinFKPK(MSO_DATA_REQ,:%Old," = "," AND") */
        MSO_DATA_REQ.END_PER_ID = :old.PER_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update BDM_DIM_PERIOD because MSO_DATA_REQ exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* BDM_DIM_PERIOD  MSO_DATA_REQ on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BDM_DIM_PERIOD"
    CHILD_OWNER="", CHILD_TABLE="MSO_DATA_REQ"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_59", FK_COLUMNS="START_PER_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.PER_ID <> :new.PER_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM MSO_DATA_REQ
      WHERE
        /*  %JoinFKPK(MSO_DATA_REQ,:%Old," = "," AND") */
        MSO_DATA_REQ.START_PER_ID = :old.PER_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update BDM_DIM_PERIOD because MSO_DATA_REQ exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_IKB_FIXTURE_MASTER AFTER DELETE ON IKB_FIXTURE_MASTER for each row
-- ERwin Builtin Trigger
-- DELETE trigger on IKB_FIXTURE_MASTER 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* IKB_FIXTURE_MASTER  MSO_INSTANCE_FIXT_COMPBTY on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="000373c0", PARENT_OWNER="", PARENT_TABLE="IKB_FIXTURE_MASTER"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE_FIXT_COMPBTY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_47", FK_COLUMNS="FORBID_FIXTURE_ID" */
    SELECT count(*) INTO NUMROWS
      FROM MSO_INSTANCE_FIXT_COMPBTY
      WHERE
        /*  %JoinFKPK(MSO_INSTANCE_FIXT_COMPBTY,:%Old," = "," AND") */
        MSO_INSTANCE_FIXT_COMPBTY.FORBID_FIXTURE_ID = :old.FIXTURE_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete IKB_FIXTURE_MASTER because MSO_INSTANCE_FIXT_COMPBTY exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* IKB_FIXTURE_MASTER  MSO_INSTANCE_FIXT_COMPBTY on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="IKB_FIXTURE_MASTER"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE_FIXT_COMPBTY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_45", FK_COLUMNS="MAND_FIXTURE_ID" */
    SELECT count(*) INTO NUMROWS
      FROM MSO_INSTANCE_FIXT_COMPBTY
      WHERE
        /*  %JoinFKPK(MSO_INSTANCE_FIXT_COMPBTY,:%Old," = "," AND") */
        MSO_INSTANCE_FIXT_COMPBTY.MAND_FIXTURE_ID = :old.FIXTURE_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete IKB_FIXTURE_MASTER because MSO_INSTANCE_FIXT_COMPBTY exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* IKB_FIXTURE_MASTER  MSO_INSTANCE_FIXT_RULES on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="IKB_FIXTURE_MASTER"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE_FIXT_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_29", FK_COLUMNS="FIXTURE_ID" */
    SELECT count(*) INTO NUMROWS
      FROM MSO_INSTANCE_FIXT_RULES
      WHERE
        /*  %JoinFKPK(MSO_INSTANCE_FIXT_RULES,:%Old," = "," AND") */
        MSO_INSTANCE_FIXT_RULES.FIXTURE_ID = :old.FIXTURE_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete IKB_FIXTURE_MASTER because MSO_INSTANCE_FIXT_RULES exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_IKB_FIXTURE_MASTER AFTER UPDATE ON IKB_FIXTURE_MASTER for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on IKB_FIXTURE_MASTER 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* IKB_FIXTURE_MASTER  MSO_INSTANCE_FIXT_COMPBTY on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="0003f4da", PARENT_OWNER="", PARENT_TABLE="IKB_FIXTURE_MASTER"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE_FIXT_COMPBTY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_47", FK_COLUMNS="FORBID_FIXTURE_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.FIXTURE_ID <> :new.FIXTURE_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM MSO_INSTANCE_FIXT_COMPBTY
      WHERE
        /*  %JoinFKPK(MSO_INSTANCE_FIXT_COMPBTY,:%Old," = "," AND") */
        MSO_INSTANCE_FIXT_COMPBTY.FORBID_FIXTURE_ID = :old.FIXTURE_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update IKB_FIXTURE_MASTER because MSO_INSTANCE_FIXT_COMPBTY exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* IKB_FIXTURE_MASTER  MSO_INSTANCE_FIXT_COMPBTY on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="IKB_FIXTURE_MASTER"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE_FIXT_COMPBTY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_45", FK_COLUMNS="MAND_FIXTURE_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.FIXTURE_ID <> :new.FIXTURE_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM MSO_INSTANCE_FIXT_COMPBTY
      WHERE
        /*  %JoinFKPK(MSO_INSTANCE_FIXT_COMPBTY,:%Old," = "," AND") */
        MSO_INSTANCE_FIXT_COMPBTY.MAND_FIXTURE_ID = :old.FIXTURE_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update IKB_FIXTURE_MASTER because MSO_INSTANCE_FIXT_COMPBTY exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* IKB_FIXTURE_MASTER  MSO_INSTANCE_FIXT_RULES on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="IKB_FIXTURE_MASTER"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE_FIXT_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_29", FK_COLUMNS="FIXTURE_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.FIXTURE_ID <> :new.FIXTURE_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM MSO_INSTANCE_FIXT_RULES
      WHERE
        /*  %JoinFKPK(MSO_INSTANCE_FIXT_RULES,:%Old," = "," AND") */
        MSO_INSTANCE_FIXT_RULES.FIXTURE_ID = :old.FIXTURE_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update IKB_FIXTURE_MASTER because MSO_INSTANCE_FIXT_RULES exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_MSO_BATCH_REQ_PHASE_MASTER AFTER DELETE ON MSO_BATCH_REQ_PHASE_MASTER for each row
-- ERwin Builtin Trigger
-- DELETE trigger on MSO_BATCH_REQ_PHASE_MASTER 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* MSO_BATCH_REQ_PHASE_MASTER  MSO_BATCH_WRAPPER_DETL on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="0001270d", PARENT_OWNER="", PARENT_TABLE="MSO_BATCH_REQ_PHASE_MASTER"
    CHILD_OWNER="", CHILD_TABLE="MSO_BATCH_WRAPPER_DETL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_151", FK_COLUMNS="MSO_BATCH_REQ_PHASE_ID" */
    SELECT count(*) INTO NUMROWS
      FROM MSO_BATCH_WRAPPER_DETL
      WHERE
        /*  %JoinFKPK(MSO_BATCH_WRAPPER_DETL,:%Old," = "," AND") */
        MSO_BATCH_WRAPPER_DETL.MSO_BATCH_REQ_PHASE_ID = :old.MSO_BATCH_REQ_PHASE_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete MSO_BATCH_REQ_PHASE_MASTER because MSO_BATCH_WRAPPER_DETL exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_MSO_BATCH_REQ_PHASE_MASTER AFTER UPDATE ON MSO_BATCH_REQ_PHASE_MASTER for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on MSO_BATCH_REQ_PHASE_MASTER 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* MSO_BATCH_REQ_PHASE_MASTER  MSO_BATCH_WRAPPER_DETL on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00015480", PARENT_OWNER="", PARENT_TABLE="MSO_BATCH_REQ_PHASE_MASTER"
    CHILD_OWNER="", CHILD_TABLE="MSO_BATCH_WRAPPER_DETL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_151", FK_COLUMNS="MSO_BATCH_REQ_PHASE_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.MSO_BATCH_REQ_PHASE_ID <> :new.MSO_BATCH_REQ_PHASE_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM MSO_BATCH_WRAPPER_DETL
      WHERE
        /*  %JoinFKPK(MSO_BATCH_WRAPPER_DETL,:%Old," = "," AND") */
        MSO_BATCH_WRAPPER_DETL.MSO_BATCH_REQ_PHASE_ID = :old.MSO_BATCH_REQ_PHASE_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update MSO_BATCH_REQ_PHASE_MASTER because MSO_BATCH_WRAPPER_DETL exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_MSO_INSTANCE AFTER DELETE ON MSO_INSTANCE for each row
-- ERwin Builtin Trigger
-- DELETE trigger on MSO_INSTANCE 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* MSO_INSTANCE  MSO_INSTANCE_DEPT_CONST_RULES on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="000494c6", PARENT_OWNER="", PARENT_TABLE="MSO_INSTANCE"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE_DEPT_CONST_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_158", FK_COLUMNS="INSTANCE_ID" */
    SELECT count(*) INTO NUMROWS
      FROM MSO_INSTANCE_DEPT_CONST_RULES
      WHERE
        /*  %JoinFKPK(MSO_INSTANCE_DEPT_CONST_RULES,:%Old," = "," AND") */
        MSO_INSTANCE_DEPT_CONST_RULES.INSTANCE_ID = :old.INSTANCE_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete MSO_INSTANCE because MSO_INSTANCE_DEPT_CONST_RULES exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* MSO_INSTANCE  MSO_INSTANCE_FIXT_COMPBTY on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="MSO_INSTANCE"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE_FIXT_COMPBTY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_157", FK_COLUMNS="INSTANCE_ID" */
    SELECT count(*) INTO NUMROWS
      FROM MSO_INSTANCE_FIXT_COMPBTY
      WHERE
        /*  %JoinFKPK(MSO_INSTANCE_FIXT_COMPBTY,:%Old," = "," AND") */
        MSO_INSTANCE_FIXT_COMPBTY.INSTANCE_ID = :old.INSTANCE_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete MSO_INSTANCE because MSO_INSTANCE_FIXT_COMPBTY exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* MSO_INSTANCE  MSO_INSTANCE_FIXT_RULES on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="MSO_INSTANCE"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE_FIXT_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_156", FK_COLUMNS="INSTANCE_ID" */
    SELECT count(*) INTO NUMROWS
      FROM MSO_INSTANCE_FIXT_RULES
      WHERE
        /*  %JoinFKPK(MSO_INSTANCE_FIXT_RULES,:%Old," = "," AND") */
        MSO_INSTANCE_FIXT_RULES.INSTANCE_ID = :old.INSTANCE_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete MSO_INSTANCE because MSO_INSTANCE_FIXT_RULES exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* MSO_INSTANCE  MSO_INSTANCE_SHARED_FIXT_RULES on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="MSO_INSTANCE"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE_SHARED_FIXT_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_155", FK_COLUMNS="INSTANCE_ID" */
    SELECT count(*) INTO NUMROWS
      FROM MSO_INSTANCE_SHARED_FIXT_RULES
      WHERE
        /*  %JoinFKPK(MSO_INSTANCE_SHARED_FIXT_RULES,:%Old," = "," AND") */
        MSO_INSTANCE_SHARED_FIXT_RULES.INSTANCE_ID = :old.INSTANCE_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete MSO_INSTANCE because MSO_INSTANCE_SHARED_FIXT_RULES exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tI_MSO_INSTANCE BEFORE INSERT ON MSO_INSTANCE for each row
-- ERwin Builtin Trigger
-- INSERT trigger on MSO_INSTANCE 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* MSO_PROJECT_RULE_SETUP_ASSOC  MSO_INSTANCE on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="0004832c", PARENT_OWNER="", PARENT_TABLE="MSO_PROJECT_RULE_SETUP_ASSOC"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_152", FK_COLUMNS="PROJ_RULE_SETUP_ID" */
    SELECT count(*) INTO NUMROWS
      FROM MSO_PROJECT_RULE_SETUP_ASSOC
      WHERE
        /* %JoinFKPK(:%New,MSO_PROJECT_RULE_SETUP_ASSOC," = "," AND") */
        :new.PROJ_RULE_SETUP_ID = MSO_PROJECT_RULE_SETUP_ASSOC.PROJ_RULE_SETUP_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert MSO_INSTANCE because MSO_PROJECT_RULE_SETUP_ASSOC does not exist.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* BDM_DIM_LOCATION  MSO_INSTANCE on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BDM_DIM_LOCATION"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_118", FK_COLUMNS="LOC_ID" */
    SELECT count(*) INTO NUMROWS
      FROM BDM_DIM_LOCATION
      WHERE
        /* %JoinFKPK(:%New,BDM_DIM_LOCATION," = "," AND") */
        :new.LOC_ID = BDM_DIM_LOCATION.LOC_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert MSO_INSTANCE because BDM_DIM_LOCATION does not exist.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* MSO_DIM_KPI  MSO_INSTANCE on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="MSO_DIM_KPI"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_89", FK_COLUMNS="KPI_ID" */
    SELECT count(*) INTO NUMROWS
      FROM MSO_DIM_KPI
      WHERE
        /* %JoinFKPK(:%New,MSO_DIM_KPI," = "," AND") */
        :new.KPI_ID = MSO_DIM_KPI.KPI_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert MSO_INSTANCE because MSO_DIM_KPI does not exist.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* MSO_PROJ_DATA_REQ  MSO_INSTANCE on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="MSO_PROJ_DATA_REQ"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_76", FK_COLUMNS="MSO_PROJ_DATA_REQ_ID" */
    SELECT count(*) INTO NUMROWS
      FROM MSO_PROJ_DATA_REQ
      WHERE
        /* %JoinFKPK(:%New,MSO_PROJ_DATA_REQ," = "," AND") */
        :new.MSO_PROJ_DATA_REQ_ID = MSO_PROJ_DATA_REQ.MSO_PROJ_DATA_REQ_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert MSO_INSTANCE because MSO_PROJ_DATA_REQ does not exist.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_MSO_INSTANCE AFTER UPDATE ON MSO_INSTANCE for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on MSO_INSTANCE 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* MSO_INSTANCE  MSO_INSTANCE_DEPT_CONST_RULES on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="0009fefc", PARENT_OWNER="", PARENT_TABLE="MSO_INSTANCE"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE_DEPT_CONST_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_158", FK_COLUMNS="INSTANCE_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.INSTANCE_ID <> :new.INSTANCE_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM MSO_INSTANCE_DEPT_CONST_RULES
      WHERE
        /*  %JoinFKPK(MSO_INSTANCE_DEPT_CONST_RULES,:%Old," = "," AND") */
        MSO_INSTANCE_DEPT_CONST_RULES.INSTANCE_ID = :old.INSTANCE_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update MSO_INSTANCE because MSO_INSTANCE_DEPT_CONST_RULES exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* MSO_INSTANCE  MSO_INSTANCE_FIXT_COMPBTY on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="MSO_INSTANCE"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE_FIXT_COMPBTY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_157", FK_COLUMNS="INSTANCE_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.INSTANCE_ID <> :new.INSTANCE_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM MSO_INSTANCE_FIXT_COMPBTY
      WHERE
        /*  %JoinFKPK(MSO_INSTANCE_FIXT_COMPBTY,:%Old," = "," AND") */
        MSO_INSTANCE_FIXT_COMPBTY.INSTANCE_ID = :old.INSTANCE_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update MSO_INSTANCE because MSO_INSTANCE_FIXT_COMPBTY exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* MSO_INSTANCE  MSO_INSTANCE_FIXT_RULES on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="MSO_INSTANCE"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE_FIXT_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_156", FK_COLUMNS="INSTANCE_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.INSTANCE_ID <> :new.INSTANCE_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM MSO_INSTANCE_FIXT_RULES
      WHERE
        /*  %JoinFKPK(MSO_INSTANCE_FIXT_RULES,:%Old," = "," AND") */
        MSO_INSTANCE_FIXT_RULES.INSTANCE_ID = :old.INSTANCE_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update MSO_INSTANCE because MSO_INSTANCE_FIXT_RULES exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* MSO_INSTANCE  MSO_INSTANCE_SHARED_FIXT_RULES on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="MSO_INSTANCE"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE_SHARED_FIXT_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_155", FK_COLUMNS="INSTANCE_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.INSTANCE_ID <> :new.INSTANCE_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM MSO_INSTANCE_SHARED_FIXT_RULES
      WHERE
        /*  %JoinFKPK(MSO_INSTANCE_SHARED_FIXT_RULES,:%Old," = "," AND") */
        MSO_INSTANCE_SHARED_FIXT_RULES.INSTANCE_ID = :old.INSTANCE_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update MSO_INSTANCE because MSO_INSTANCE_SHARED_FIXT_RULES exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* MSO_PROJECT_RULE_SETUP_ASSOC  MSO_INSTANCE on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="MSO_PROJECT_RULE_SETUP_ASSOC"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_152", FK_COLUMNS="PROJ_RULE_SETUP_ID" */
  SELECT count(*) INTO NUMROWS
    FROM MSO_PROJECT_RULE_SETUP_ASSOC
    WHERE
      /* %JoinFKPK(:%New,MSO_PROJECT_RULE_SETUP_ASSOC," = "," AND") */
      :new.PROJ_RULE_SETUP_ID = MSO_PROJECT_RULE_SETUP_ASSOC.PROJ_RULE_SETUP_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update MSO_INSTANCE because MSO_PROJECT_RULE_SETUP_ASSOC does not exist.'
    );
  END IF;

  /* ERwin Builtin Trigger */
  /* BDM_DIM_LOCATION  MSO_INSTANCE on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BDM_DIM_LOCATION"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_118", FK_COLUMNS="LOC_ID" */
  SELECT count(*) INTO NUMROWS
    FROM BDM_DIM_LOCATION
    WHERE
      /* %JoinFKPK(:%New,BDM_DIM_LOCATION," = "," AND") */
      :new.LOC_ID = BDM_DIM_LOCATION.LOC_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update MSO_INSTANCE because BDM_DIM_LOCATION does not exist.'
    );
  END IF;

  /* ERwin Builtin Trigger */
  /* MSO_DIM_KPI  MSO_INSTANCE on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="MSO_DIM_KPI"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_89", FK_COLUMNS="KPI_ID" */
  SELECT count(*) INTO NUMROWS
    FROM MSO_DIM_KPI
    WHERE
      /* %JoinFKPK(:%New,MSO_DIM_KPI," = "," AND") */
      :new.KPI_ID = MSO_DIM_KPI.KPI_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update MSO_INSTANCE because MSO_DIM_KPI does not exist.'
    );
  END IF;

  /* ERwin Builtin Trigger */
  /* MSO_PROJ_DATA_REQ  MSO_INSTANCE on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="MSO_PROJ_DATA_REQ"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_76", FK_COLUMNS="MSO_PROJ_DATA_REQ_ID" */
  SELECT count(*) INTO NUMROWS
    FROM MSO_PROJ_DATA_REQ
    WHERE
      /* %JoinFKPK(:%New,MSO_PROJ_DATA_REQ," = "," AND") */
      :new.MSO_PROJ_DATA_REQ_ID = MSO_PROJ_DATA_REQ.MSO_PROJ_DATA_REQ_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update MSO_INSTANCE because MSO_PROJ_DATA_REQ does not exist.'
    );
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER tI_MSO_INSTANCE_FIXT_RULES BEFORE INSERT ON MSO_INSTANCE_FIXT_RULES for each row
-- ERwin Builtin Trigger
-- INSERT trigger on MSO_INSTANCE_FIXT_RULES 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* MSO_INSTANCE  MSO_INSTANCE_FIXT_RULES on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00023952", PARENT_OWNER="", PARENT_TABLE="MSO_INSTANCE"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE_FIXT_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_156", FK_COLUMNS="INSTANCE_ID" */
    SELECT count(*) INTO NUMROWS
      FROM MSO_INSTANCE
      WHERE
        /* %JoinFKPK(:%New,MSO_INSTANCE," = "," AND") */
        :new.INSTANCE_ID = MSO_INSTANCE.INSTANCE_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert MSO_INSTANCE_FIXT_RULES because MSO_INSTANCE does not exist.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* IKB_FIXTURE_MASTER  MSO_INSTANCE_FIXT_RULES on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="IKB_FIXTURE_MASTER"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE_FIXT_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_29", FK_COLUMNS="FIXTURE_ID" */
    SELECT count(*) INTO NUMROWS
      FROM IKB_FIXTURE_MASTER
      WHERE
        /* %JoinFKPK(:%New,IKB_FIXTURE_MASTER," = "," AND") */
        :new.FIXTURE_ID = IKB_FIXTURE_MASTER.FIXTURE_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert MSO_INSTANCE_FIXT_RULES because IKB_FIXTURE_MASTER does not exist.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_MSO_INSTANCE_FIXT_RULES AFTER UPDATE ON MSO_INSTANCE_FIXT_RULES for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on MSO_INSTANCE_FIXT_RULES 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* MSO_INSTANCE  MSO_INSTANCE_FIXT_RULES on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="0002342f", PARENT_OWNER="", PARENT_TABLE="MSO_INSTANCE"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE_FIXT_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_156", FK_COLUMNS="INSTANCE_ID" */
  SELECT count(*) INTO NUMROWS
    FROM MSO_INSTANCE
    WHERE
      /* %JoinFKPK(:%New,MSO_INSTANCE," = "," AND") */
      :new.INSTANCE_ID = MSO_INSTANCE.INSTANCE_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update MSO_INSTANCE_FIXT_RULES because MSO_INSTANCE does not exist.'
    );
  END IF;

  /* ERwin Builtin Trigger */
  /* IKB_FIXTURE_MASTER  MSO_INSTANCE_FIXT_RULES on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="IKB_FIXTURE_MASTER"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE_FIXT_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_29", FK_COLUMNS="FIXTURE_ID" */
  SELECT count(*) INTO NUMROWS
    FROM IKB_FIXTURE_MASTER
    WHERE
      /* %JoinFKPK(:%New,IKB_FIXTURE_MASTER," = "," AND") */
      :new.FIXTURE_ID = IKB_FIXTURE_MASTER.FIXTURE_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update MSO_INSTANCE_FIXT_RULES because IKB_FIXTURE_MASTER does not exist.'
    );
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER tI_MSO_INSTANCE_DEPT_CONST_RUL BEFORE INSERT ON MSO_INSTANCE_DEPT_CONST_RULES for each row
-- ERwin Builtin Trigger
-- INSERT trigger on MSO_INSTANCE_DEPT_CONST_RULES 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* MSO_INSTANCE  MSO_INSTANCE_DEPT_CONST_RULES on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="000248b8", PARENT_OWNER="", PARENT_TABLE="MSO_INSTANCE"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE_DEPT_CONST_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_158", FK_COLUMNS="INSTANCE_ID" */
    SELECT count(*) INTO NUMROWS
      FROM MSO_INSTANCE
      WHERE
        /* %JoinFKPK(:%New,MSO_INSTANCE," = "," AND") */
        :new.INSTANCE_ID = MSO_INSTANCE.INSTANCE_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert MSO_INSTANCE_DEPT_CONST_RULES because MSO_INSTANCE does not exist.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* BASIC_DEPARTMENT  MSO_INSTANCE_DEPT_CONST_RULES on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BASIC_DEPARTMENT"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE_DEPT_CONST_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_41", FK_COLUMNS="DEPARTMENT_ID" */
    SELECT count(*) INTO NUMROWS
      FROM BASIC_DEPARTMENT
      WHERE
        /* %JoinFKPK(:%New,BASIC_DEPARTMENT," = "," AND") */
        :new.DEPARTMENT_ID = BASIC_DEPARTMENT.DEPARTMENT_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert MSO_INSTANCE_DEPT_CONST_RULES because BASIC_DEPARTMENT does not exist.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_MSO_INSTANCE_DEPT_CONST_RUL AFTER UPDATE ON MSO_INSTANCE_DEPT_CONST_RULES for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on MSO_INSTANCE_DEPT_CONST_RULES 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* MSO_INSTANCE  MSO_INSTANCE_DEPT_CONST_RULES on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00023a99", PARENT_OWNER="", PARENT_TABLE="MSO_INSTANCE"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE_DEPT_CONST_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_158", FK_COLUMNS="INSTANCE_ID" */
  SELECT count(*) INTO NUMROWS
    FROM MSO_INSTANCE
    WHERE
      /* %JoinFKPK(:%New,MSO_INSTANCE," = "," AND") */
      :new.INSTANCE_ID = MSO_INSTANCE.INSTANCE_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update MSO_INSTANCE_DEPT_CONST_RULES because MSO_INSTANCE does not exist.'
    );
  END IF;

  /* ERwin Builtin Trigger */
  /* BASIC_DEPARTMENT  MSO_INSTANCE_DEPT_CONST_RULES on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BASIC_DEPARTMENT"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE_DEPT_CONST_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_41", FK_COLUMNS="DEPARTMENT_ID" */
  SELECT count(*) INTO NUMROWS
    FROM BASIC_DEPARTMENT
    WHERE
      /* %JoinFKPK(:%New,BASIC_DEPARTMENT," = "," AND") */
      :new.DEPARTMENT_ID = BASIC_DEPARTMENT.DEPARTMENT_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update MSO_INSTANCE_DEPT_CONST_RULES because BASIC_DEPARTMENT does not exist.'
    );
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_MSO_PROJ AFTER DELETE ON MSO_PROJ for each row
-- ERwin Builtin Trigger
-- DELETE trigger on MSO_PROJ 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* MSO_PROJ  MSO_PROJECT_STORE on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00032f3f", PARENT_OWNER="", PARENT_TABLE="MSO_PROJ"
    CHILD_OWNER="", CHILD_TABLE="MSO_PROJECT_STORE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_145", FK_COLUMNS="MSO_PROJ_ID" */
    SELECT count(*) INTO NUMROWS
      FROM MSO_PROJECT_STORE
      WHERE
        /*  %JoinFKPK(MSO_PROJECT_STORE,:%Old," = "," AND") */
        MSO_PROJECT_STORE.MSO_PROJ_ID = :old.MSO_PROJ_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete MSO_PROJ because MSO_PROJECT_STORE exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* MSO_PROJ  MSO_PROJECT_RULE_SETUP_ASSOC on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="MSO_PROJ"
    CHILD_OWNER="", CHILD_TABLE="MSO_PROJECT_RULE_SETUP_ASSOC"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_139", FK_COLUMNS="MSO_PROJ_ID" */
    SELECT count(*) INTO NUMROWS
      FROM MSO_PROJECT_RULE_SETUP_ASSOC
      WHERE
        /*  %JoinFKPK(MSO_PROJECT_RULE_SETUP_ASSOC,:%Old," = "," AND") */
        MSO_PROJECT_RULE_SETUP_ASSOC.MSO_PROJ_ID = :old.MSO_PROJ_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete MSO_PROJ because MSO_PROJECT_RULE_SETUP_ASSOC exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* MSO_PROJ  MSO_PROJ_DATA_REQ on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="MSO_PROJ"
    CHILD_OWNER="", CHILD_TABLE="MSO_PROJ_DATA_REQ"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_70", FK_COLUMNS="MSO_PROJ_ID" */
    SELECT count(*) INTO NUMROWS
      FROM MSO_PROJ_DATA_REQ
      WHERE
        /*  %JoinFKPK(MSO_PROJ_DATA_REQ,:%Old," = "," AND") */
        MSO_PROJ_DATA_REQ.MSO_PROJ_ID = :old.MSO_PROJ_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete MSO_PROJ because MSO_PROJ_DATA_REQ exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_MSO_PROJ AFTER UPDATE ON MSO_PROJ for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on MSO_PROJ 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* MSO_PROJ  MSO_PROJECT_STORE on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="0003ac8f", PARENT_OWNER="", PARENT_TABLE="MSO_PROJ"
    CHILD_OWNER="", CHILD_TABLE="MSO_PROJECT_STORE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_145", FK_COLUMNS="MSO_PROJ_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.MSO_PROJ_ID <> :new.MSO_PROJ_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM MSO_PROJECT_STORE
      WHERE
        /*  %JoinFKPK(MSO_PROJECT_STORE,:%Old," = "," AND") */
        MSO_PROJECT_STORE.MSO_PROJ_ID = :old.MSO_PROJ_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update MSO_PROJ because MSO_PROJECT_STORE exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* MSO_PROJ  MSO_PROJECT_RULE_SETUP_ASSOC on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="MSO_PROJ"
    CHILD_OWNER="", CHILD_TABLE="MSO_PROJECT_RULE_SETUP_ASSOC"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_139", FK_COLUMNS="MSO_PROJ_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.MSO_PROJ_ID <> :new.MSO_PROJ_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM MSO_PROJECT_RULE_SETUP_ASSOC
      WHERE
        /*  %JoinFKPK(MSO_PROJECT_RULE_SETUP_ASSOC,:%Old," = "," AND") */
        MSO_PROJECT_RULE_SETUP_ASSOC.MSO_PROJ_ID = :old.MSO_PROJ_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update MSO_PROJ because MSO_PROJECT_RULE_SETUP_ASSOC exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* MSO_PROJ  MSO_PROJ_DATA_REQ on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="MSO_PROJ"
    CHILD_OWNER="", CHILD_TABLE="MSO_PROJ_DATA_REQ"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_70", FK_COLUMNS="MSO_PROJ_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.MSO_PROJ_ID <> :new.MSO_PROJ_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM MSO_PROJ_DATA_REQ
      WHERE
        /*  %JoinFKPK(MSO_PROJ_DATA_REQ,:%Old," = "," AND") */
        MSO_PROJ_DATA_REQ.MSO_PROJ_ID = :old.MSO_PROJ_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update MSO_PROJ because MSO_PROJ_DATA_REQ exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER tI_MSO_PROJECT_STORE BEFORE INSERT ON MSO_PROJECT_STORE for each row
-- ERwin Builtin Trigger
-- INSERT trigger on MSO_PROJECT_STORE 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* BDM_DIM_LOCATION  MSO_PROJECT_STORE on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00021296", PARENT_OWNER="", PARENT_TABLE="BDM_DIM_LOCATION"
    CHILD_OWNER="", CHILD_TABLE="MSO_PROJECT_STORE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_146", FK_COLUMNS="LOC_ID" */
    SELECT count(*) INTO NUMROWS
      FROM BDM_DIM_LOCATION
      WHERE
        /* %JoinFKPK(:%New,BDM_DIM_LOCATION," = "," AND") */
        :new.LOC_ID = BDM_DIM_LOCATION.LOC_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert MSO_PROJECT_STORE because BDM_DIM_LOCATION does not exist.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* MSO_PROJ  MSO_PROJECT_STORE on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="MSO_PROJ"
    CHILD_OWNER="", CHILD_TABLE="MSO_PROJECT_STORE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_145", FK_COLUMNS="MSO_PROJ_ID" */
    SELECT count(*) INTO NUMROWS
      FROM MSO_PROJ
      WHERE
        /* %JoinFKPK(:%New,MSO_PROJ," = "," AND") */
        :new.MSO_PROJ_ID = MSO_PROJ.MSO_PROJ_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert MSO_PROJECT_STORE because MSO_PROJ does not exist.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_MSO_PROJECT_STORE AFTER UPDATE ON MSO_PROJECT_STORE for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on MSO_PROJECT_STORE 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* BDM_DIM_LOCATION  MSO_PROJECT_STORE on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="000216fd", PARENT_OWNER="", PARENT_TABLE="BDM_DIM_LOCATION"
    CHILD_OWNER="", CHILD_TABLE="MSO_PROJECT_STORE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_146", FK_COLUMNS="LOC_ID" */
  SELECT count(*) INTO NUMROWS
    FROM BDM_DIM_LOCATION
    WHERE
      /* %JoinFKPK(:%New,BDM_DIM_LOCATION," = "," AND") */
      :new.LOC_ID = BDM_DIM_LOCATION.LOC_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update MSO_PROJECT_STORE because BDM_DIM_LOCATION does not exist.'
    );
  END IF;

  /* ERwin Builtin Trigger */
  /* MSO_PROJ  MSO_PROJECT_STORE on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="MSO_PROJ"
    CHILD_OWNER="", CHILD_TABLE="MSO_PROJECT_STORE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_145", FK_COLUMNS="MSO_PROJ_ID" */
  SELECT count(*) INTO NUMROWS
    FROM MSO_PROJ
    WHERE
      /* %JoinFKPK(:%New,MSO_PROJ," = "," AND") */
      :new.MSO_PROJ_ID = MSO_PROJ.MSO_PROJ_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update MSO_PROJECT_STORE because MSO_PROJ does not exist.'
    );
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_MSO_PROJ_DATA_REQ AFTER DELETE ON MSO_PROJ_DATA_REQ for each row
-- ERwin Builtin Trigger
-- DELETE trigger on MSO_PROJ_DATA_REQ 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* MSO_PROJ_DATA_REQ  MSO_INSTANCE on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="0000f91c", PARENT_OWNER="", PARENT_TABLE="MSO_PROJ_DATA_REQ"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_76", FK_COLUMNS="MSO_PROJ_DATA_REQ_ID" */
    SELECT count(*) INTO NUMROWS
      FROM MSO_INSTANCE
      WHERE
        /*  %JoinFKPK(MSO_INSTANCE,:%Old," = "," AND") */
        MSO_INSTANCE.MSO_PROJ_DATA_REQ_ID = :old.MSO_PROJ_DATA_REQ_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete MSO_PROJ_DATA_REQ because MSO_INSTANCE exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tI_MSO_PROJ_DATA_REQ BEFORE INSERT ON MSO_PROJ_DATA_REQ for each row
-- ERwin Builtin Trigger
-- INSERT trigger on MSO_PROJ_DATA_REQ 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* MSO_PROJ  MSO_PROJ_DATA_REQ on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="0002124f", PARENT_OWNER="", PARENT_TABLE="MSO_PROJ"
    CHILD_OWNER="", CHILD_TABLE="MSO_PROJ_DATA_REQ"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_70", FK_COLUMNS="MSO_PROJ_ID" */
    SELECT count(*) INTO NUMROWS
      FROM MSO_PROJ
      WHERE
        /* %JoinFKPK(:%New,MSO_PROJ," = "," AND") */
        :new.MSO_PROJ_ID = MSO_PROJ.MSO_PROJ_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert MSO_PROJ_DATA_REQ because MSO_PROJ does not exist.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* MSO_DATA_REQ  MSO_PROJ_DATA_REQ on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="MSO_DATA_REQ"
    CHILD_OWNER="", CHILD_TABLE="MSO_PROJ_DATA_REQ"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_69", FK_COLUMNS="MSO_DATA_REQ_ID" */
    SELECT count(*) INTO NUMROWS
      FROM MSO_DATA_REQ
      WHERE
        /* %JoinFKPK(:%New,MSO_DATA_REQ," = "," AND") */
        :new.MSO_DATA_REQ_ID = MSO_DATA_REQ.MSO_DATA_REQ_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert MSO_PROJ_DATA_REQ because MSO_DATA_REQ does not exist.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_MSO_PROJ_DATA_REQ AFTER UPDATE ON MSO_PROJ_DATA_REQ for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on MSO_PROJ_DATA_REQ 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* MSO_PROJ_DATA_REQ  MSO_INSTANCE on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00036205", PARENT_OWNER="", PARENT_TABLE="MSO_PROJ_DATA_REQ"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_76", FK_COLUMNS="MSO_PROJ_DATA_REQ_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.MSO_PROJ_DATA_REQ_ID <> :new.MSO_PROJ_DATA_REQ_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM MSO_INSTANCE
      WHERE
        /*  %JoinFKPK(MSO_INSTANCE,:%Old," = "," AND") */
        MSO_INSTANCE.MSO_PROJ_DATA_REQ_ID = :old.MSO_PROJ_DATA_REQ_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update MSO_PROJ_DATA_REQ because MSO_INSTANCE exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* MSO_PROJ  MSO_PROJ_DATA_REQ on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="MSO_PROJ"
    CHILD_OWNER="", CHILD_TABLE="MSO_PROJ_DATA_REQ"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_70", FK_COLUMNS="MSO_PROJ_ID" */
  SELECT count(*) INTO NUMROWS
    FROM MSO_PROJ
    WHERE
      /* %JoinFKPK(:%New,MSO_PROJ," = "," AND") */
      :new.MSO_PROJ_ID = MSO_PROJ.MSO_PROJ_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update MSO_PROJ_DATA_REQ because MSO_PROJ does not exist.'
    );
  END IF;

  /* ERwin Builtin Trigger */
  /* MSO_DATA_REQ  MSO_PROJ_DATA_REQ on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="MSO_DATA_REQ"
    CHILD_OWNER="", CHILD_TABLE="MSO_PROJ_DATA_REQ"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_69", FK_COLUMNS="MSO_DATA_REQ_ID" */
  SELECT count(*) INTO NUMROWS
    FROM MSO_DATA_REQ
    WHERE
      /* %JoinFKPK(:%New,MSO_DATA_REQ," = "," AND") */
      :new.MSO_DATA_REQ_ID = MSO_DATA_REQ.MSO_DATA_REQ_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update MSO_PROJ_DATA_REQ because MSO_DATA_REQ does not exist.'
    );
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_MSO_STATUS_MASTER AFTER DELETE ON MSO_STATUS_MASTER for each row
-- ERwin Builtin Trigger
-- DELETE trigger on MSO_STATUS_MASTER 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* MSO_STATUS_MASTER  MSO_BATCH_WRAPPER_DETL on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="000104a7", PARENT_OWNER="", PARENT_TABLE="MSO_STATUS_MASTER"
    CHILD_OWNER="", CHILD_TABLE="MSO_BATCH_WRAPPER_DETL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_154", FK_COLUMNS="STATUS_ID" */
    SELECT count(*) INTO NUMROWS
      FROM MSO_BATCH_WRAPPER_DETL
      WHERE
        /*  %JoinFKPK(MSO_BATCH_WRAPPER_DETL,:%Old," = "," AND") */
        MSO_BATCH_WRAPPER_DETL.STATUS_ID = :old.STATUS_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete MSO_STATUS_MASTER because MSO_BATCH_WRAPPER_DETL exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_MSO_STATUS_MASTER AFTER UPDATE ON MSO_STATUS_MASTER for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on MSO_STATUS_MASTER 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* MSO_STATUS_MASTER  MSO_BATCH_WRAPPER_DETL on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00012c4e", PARENT_OWNER="", PARENT_TABLE="MSO_STATUS_MASTER"
    CHILD_OWNER="", CHILD_TABLE="MSO_BATCH_WRAPPER_DETL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_154", FK_COLUMNS="STATUS_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.STATUS_ID <> :new.STATUS_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM MSO_BATCH_WRAPPER_DETL
      WHERE
        /*  %JoinFKPK(MSO_BATCH_WRAPPER_DETL,:%Old," = "," AND") */
        MSO_BATCH_WRAPPER_DETL.STATUS_ID = :old.STATUS_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update MSO_STATUS_MASTER because MSO_BATCH_WRAPPER_DETL exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER tI_MSO_BATCH_WRAPPER_DETL BEFORE INSERT ON MSO_BATCH_WRAPPER_DETL for each row
-- ERwin Builtin Trigger
-- INSERT trigger on MSO_BATCH_WRAPPER_DETL 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* MSO_STATUS_MASTER  MSO_BATCH_WRAPPER_DETL on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00027476", PARENT_OWNER="", PARENT_TABLE="MSO_STATUS_MASTER"
    CHILD_OWNER="", CHILD_TABLE="MSO_BATCH_WRAPPER_DETL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_154", FK_COLUMNS="STATUS_ID" */
    SELECT count(*) INTO NUMROWS
      FROM MSO_STATUS_MASTER
      WHERE
        /* %JoinFKPK(:%New,MSO_STATUS_MASTER," = "," AND") */
        :new.STATUS_ID = MSO_STATUS_MASTER.STATUS_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert MSO_BATCH_WRAPPER_DETL because MSO_STATUS_MASTER does not exist.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* MSO_BATCH_REQ_PHASE_MASTER  MSO_BATCH_WRAPPER_DETL on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="MSO_BATCH_REQ_PHASE_MASTER"
    CHILD_OWNER="", CHILD_TABLE="MSO_BATCH_WRAPPER_DETL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_151", FK_COLUMNS="MSO_BATCH_REQ_PHASE_ID" */
    SELECT count(*) INTO NUMROWS
      FROM MSO_BATCH_REQ_PHASE_MASTER
      WHERE
        /* %JoinFKPK(:%New,MSO_BATCH_REQ_PHASE_MASTER," = "," AND") */
        :new.MSO_BATCH_REQ_PHASE_ID = MSO_BATCH_REQ_PHASE_MASTER.MSO_BATCH_REQ_PHASE_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert MSO_BATCH_WRAPPER_DETL because MSO_BATCH_REQ_PHASE_MASTER does not exist.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_MSO_BATCH_WRAPPER_DETL AFTER UPDATE ON MSO_BATCH_WRAPPER_DETL for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on MSO_BATCH_WRAPPER_DETL 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* MSO_STATUS_MASTER  MSO_BATCH_WRAPPER_DETL on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00026d60", PARENT_OWNER="", PARENT_TABLE="MSO_STATUS_MASTER"
    CHILD_OWNER="", CHILD_TABLE="MSO_BATCH_WRAPPER_DETL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_154", FK_COLUMNS="STATUS_ID" */
  SELECT count(*) INTO NUMROWS
    FROM MSO_STATUS_MASTER
    WHERE
      /* %JoinFKPK(:%New,MSO_STATUS_MASTER," = "," AND") */
      :new.STATUS_ID = MSO_STATUS_MASTER.STATUS_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update MSO_BATCH_WRAPPER_DETL because MSO_STATUS_MASTER does not exist.'
    );
  END IF;

  /* ERwin Builtin Trigger */
  /* MSO_BATCH_REQ_PHASE_MASTER  MSO_BATCH_WRAPPER_DETL on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="MSO_BATCH_REQ_PHASE_MASTER"
    CHILD_OWNER="", CHILD_TABLE="MSO_BATCH_WRAPPER_DETL"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_151", FK_COLUMNS="MSO_BATCH_REQ_PHASE_ID" */
  SELECT count(*) INTO NUMROWS
    FROM MSO_BATCH_REQ_PHASE_MASTER
    WHERE
      /* %JoinFKPK(:%New,MSO_BATCH_REQ_PHASE_MASTER," = "," AND") */
      :new.MSO_BATCH_REQ_PHASE_ID = MSO_BATCH_REQ_PHASE_MASTER.MSO_BATCH_REQ_PHASE_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update MSO_BATCH_WRAPPER_DETL because MSO_BATCH_REQ_PHASE_MASTER does not exist.'
    );
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_MSO_DATA_REQ AFTER DELETE ON MSO_DATA_REQ for each row
-- ERwin Builtin Trigger
-- DELETE trigger on MSO_DATA_REQ 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* MSO_DATA_REQ  MSO_PROJ_DATA_REQ on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="0000fb62", PARENT_OWNER="", PARENT_TABLE="MSO_DATA_REQ"
    CHILD_OWNER="", CHILD_TABLE="MSO_PROJ_DATA_REQ"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_69", FK_COLUMNS="MSO_DATA_REQ_ID" */
    SELECT count(*) INTO NUMROWS
      FROM MSO_PROJ_DATA_REQ
      WHERE
        /*  %JoinFKPK(MSO_PROJ_DATA_REQ,:%Old," = "," AND") */
        MSO_PROJ_DATA_REQ.MSO_DATA_REQ_ID = :old.MSO_DATA_REQ_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete MSO_DATA_REQ because MSO_PROJ_DATA_REQ exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tI_MSO_DATA_REQ BEFORE INSERT ON MSO_DATA_REQ for each row
-- ERwin Builtin Trigger
-- INSERT trigger on MSO_DATA_REQ 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* MSO_USER_MASTER  MSO_DATA_REQ on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="000451dc", PARENT_OWNER="", PARENT_TABLE="MSO_USER_MASTER"
    CHILD_OWNER="", CHILD_TABLE="MSO_DATA_REQ"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_149", FK_COLUMNS="UPDATE_ID" */
    SELECT count(*) INTO NUMROWS
      FROM MSO_USER_MASTER
      WHERE
        /* %JoinFKPK(:%New,MSO_USER_MASTER," = "," AND") */
        :new.UPDATE_ID = MSO_USER_MASTER.MSO_USER_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert MSO_DATA_REQ because MSO_USER_MASTER does not exist.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* MSO_USER_MASTER  MSO_DATA_REQ on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="MSO_USER_MASTER"
    CHILD_OWNER="", CHILD_TABLE="MSO_DATA_REQ"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_148", FK_COLUMNS="CREATE_ID" */
    SELECT count(*) INTO NUMROWS
      FROM MSO_USER_MASTER
      WHERE
        /* %JoinFKPK(:%New,MSO_USER_MASTER," = "," AND") */
        :new.CREATE_ID = MSO_USER_MASTER.MSO_USER_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert MSO_DATA_REQ because MSO_USER_MASTER does not exist.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* BDM_DIM_PERIOD  MSO_DATA_REQ on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BDM_DIM_PERIOD"
    CHILD_OWNER="", CHILD_TABLE="MSO_DATA_REQ"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_60", FK_COLUMNS="END_PER_ID" */
    SELECT count(*) INTO NUMROWS
      FROM BDM_DIM_PERIOD
      WHERE
        /* %JoinFKPK(:%New,BDM_DIM_PERIOD," = "," AND") */
        :new.END_PER_ID = BDM_DIM_PERIOD.PER_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert MSO_DATA_REQ because BDM_DIM_PERIOD does not exist.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* BDM_DIM_PERIOD  MSO_DATA_REQ on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BDM_DIM_PERIOD"
    CHILD_OWNER="", CHILD_TABLE="MSO_DATA_REQ"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_59", FK_COLUMNS="START_PER_ID" */
    SELECT count(*) INTO NUMROWS
      FROM BDM_DIM_PERIOD
      WHERE
        /* %JoinFKPK(:%New,BDM_DIM_PERIOD," = "," AND") */
        :new.START_PER_ID = BDM_DIM_PERIOD.PER_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert MSO_DATA_REQ because BDM_DIM_PERIOD does not exist.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_MSO_DATA_REQ AFTER UPDATE ON MSO_DATA_REQ for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on MSO_DATA_REQ 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* MSO_DATA_REQ  MSO_PROJ_DATA_REQ on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="000596cf", PARENT_OWNER="", PARENT_TABLE="MSO_DATA_REQ"
    CHILD_OWNER="", CHILD_TABLE="MSO_PROJ_DATA_REQ"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_69", FK_COLUMNS="MSO_DATA_REQ_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.MSO_DATA_REQ_ID <> :new.MSO_DATA_REQ_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM MSO_PROJ_DATA_REQ
      WHERE
        /*  %JoinFKPK(MSO_PROJ_DATA_REQ,:%Old," = "," AND") */
        MSO_PROJ_DATA_REQ.MSO_DATA_REQ_ID = :old.MSO_DATA_REQ_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update MSO_DATA_REQ because MSO_PROJ_DATA_REQ exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* MSO_USER_MASTER  MSO_DATA_REQ on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="MSO_USER_MASTER"
    CHILD_OWNER="", CHILD_TABLE="MSO_DATA_REQ"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_149", FK_COLUMNS="UPDATE_ID" */
  SELECT count(*) INTO NUMROWS
    FROM MSO_USER_MASTER
    WHERE
      /* %JoinFKPK(:%New,MSO_USER_MASTER," = "," AND") */
      :new.UPDATE_ID = MSO_USER_MASTER.MSO_USER_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update MSO_DATA_REQ because MSO_USER_MASTER does not exist.'
    );
  END IF;

  /* ERwin Builtin Trigger */
  /* MSO_USER_MASTER  MSO_DATA_REQ on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="MSO_USER_MASTER"
    CHILD_OWNER="", CHILD_TABLE="MSO_DATA_REQ"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_148", FK_COLUMNS="CREATE_ID" */
  SELECT count(*) INTO NUMROWS
    FROM MSO_USER_MASTER
    WHERE
      /* %JoinFKPK(:%New,MSO_USER_MASTER," = "," AND") */
      :new.CREATE_ID = MSO_USER_MASTER.MSO_USER_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update MSO_DATA_REQ because MSO_USER_MASTER does not exist.'
    );
  END IF;

  /* ERwin Builtin Trigger */
  /* BDM_DIM_PERIOD  MSO_DATA_REQ on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BDM_DIM_PERIOD"
    CHILD_OWNER="", CHILD_TABLE="MSO_DATA_REQ"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_60", FK_COLUMNS="END_PER_ID" */
  SELECT count(*) INTO NUMROWS
    FROM BDM_DIM_PERIOD
    WHERE
      /* %JoinFKPK(:%New,BDM_DIM_PERIOD," = "," AND") */
      :new.END_PER_ID = BDM_DIM_PERIOD.PER_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update MSO_DATA_REQ because BDM_DIM_PERIOD does not exist.'
    );
  END IF;

  /* ERwin Builtin Trigger */
  /* BDM_DIM_PERIOD  MSO_DATA_REQ on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BDM_DIM_PERIOD"
    CHILD_OWNER="", CHILD_TABLE="MSO_DATA_REQ"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_59", FK_COLUMNS="START_PER_ID" */
  SELECT count(*) INTO NUMROWS
    FROM BDM_DIM_PERIOD
    WHERE
      /* %JoinFKPK(:%New,BDM_DIM_PERIOD," = "," AND") */
      :new.START_PER_ID = BDM_DIM_PERIOD.PER_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update MSO_DATA_REQ because BDM_DIM_PERIOD does not exist.'
    );
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_MSO_DIM_KPI AFTER DELETE ON MSO_DIM_KPI for each row
-- ERwin Builtin Trigger
-- DELETE trigger on MSO_DIM_KPI 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* MSO_DIM_KPI  MSO_INSTANCE on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="0000e345", PARENT_OWNER="", PARENT_TABLE="MSO_DIM_KPI"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_89", FK_COLUMNS="KPI_ID" */
    SELECT count(*) INTO NUMROWS
      FROM MSO_INSTANCE
      WHERE
        /*  %JoinFKPK(MSO_INSTANCE,:%Old," = "," AND") */
        MSO_INSTANCE.KPI_ID = :old.KPI_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete MSO_DIM_KPI because MSO_INSTANCE exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_MSO_DIM_KPI AFTER UPDATE ON MSO_DIM_KPI for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on MSO_DIM_KPI 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* MSO_DIM_KPI  MSO_INSTANCE on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00010cc4", PARENT_OWNER="", PARENT_TABLE="MSO_DIM_KPI"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_89", FK_COLUMNS="KPI_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.KPI_ID <> :new.KPI_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM MSO_INSTANCE
      WHERE
        /*  %JoinFKPK(MSO_INSTANCE,:%Old," = "," AND") */
        MSO_INSTANCE.KPI_ID = :old.KPI_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update MSO_DIM_KPI because MSO_INSTANCE exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_MSO_RULE_SETUP_MASTER AFTER DELETE ON MSO_RULE_SETUP_MASTER for each row
-- ERwin Builtin Trigger
-- DELETE trigger on MSO_RULE_SETUP_MASTER 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* MSO_RULE_SETUP_MASTER  MSO_SHARD_FIX_MASTER_RULES on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="0004f266", PARENT_OWNER="", PARENT_TABLE="MSO_RULE_SETUP_MASTER"
    CHILD_OWNER="", CHILD_TABLE="MSO_SHARD_FIX_MASTER_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_144", FK_COLUMNS="RULE_SETUP_MASTER_ID" */
    SELECT count(*) INTO NUMROWS
      FROM MSO_SHARD_FIX_MASTER_RULES
      WHERE
        /*  %JoinFKPK(MSO_SHARD_FIX_MASTER_RULES,:%Old," = "," AND") */
        MSO_SHARD_FIX_MASTER_RULES.RULE_SETUP_MASTER_ID = :old.RULE_SETUP_MASTER_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete MSO_RULE_SETUP_MASTER because MSO_SHARD_FIX_MASTER_RULES exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* MSO_RULE_SETUP_MASTER  MSO_DEPT_CONST_MASTER_RULES on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="MSO_RULE_SETUP_MASTER"
    CHILD_OWNER="", CHILD_TABLE="MSO_DEPT_CONST_MASTER_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_142", FK_COLUMNS="RULE_SETUP_MASTER_ID" */
    SELECT count(*) INTO NUMROWS
      FROM MSO_DEPT_CONST_MASTER_RULES
      WHERE
        /*  %JoinFKPK(MSO_DEPT_CONST_MASTER_RULES,:%Old," = "," AND") */
        MSO_DEPT_CONST_MASTER_RULES.RULE_SETUP_MASTER_ID = :old.RULE_SETUP_MASTER_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete MSO_RULE_SETUP_MASTER because MSO_DEPT_CONST_MASTER_RULES exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* MSO_RULE_SETUP_MASTER  MSO_SEQ_MASTER_RULES on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="MSO_RULE_SETUP_MASTER"
    CHILD_OWNER="", CHILD_TABLE="MSO_SEQ_MASTER_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_141", FK_COLUMNS="RULE_SETUP_MASTER_ID" */
    SELECT count(*) INTO NUMROWS
      FROM MSO_SEQ_MASTER_RULES
      WHERE
        /*  %JoinFKPK(MSO_SEQ_MASTER_RULES,:%Old," = "," AND") */
        MSO_SEQ_MASTER_RULES.RULE_SETUP_MASTER_ID = :old.RULE_SETUP_MASTER_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete MSO_RULE_SETUP_MASTER because MSO_SEQ_MASTER_RULES exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* MSO_RULE_SETUP_MASTER  MSO_PROJECT_RULE_SETUP_ASSOC on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="MSO_RULE_SETUP_MASTER"
    CHILD_OWNER="", CHILD_TABLE="MSO_PROJECT_RULE_SETUP_ASSOC"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_140", FK_COLUMNS="RULE_SETUP_MASTER_ID" */
    SELECT count(*) INTO NUMROWS
      FROM MSO_PROJECT_RULE_SETUP_ASSOC
      WHERE
        /*  %JoinFKPK(MSO_PROJECT_RULE_SETUP_ASSOC,:%Old," = "," AND") */
        MSO_PROJECT_RULE_SETUP_ASSOC.RULE_SETUP_MASTER_ID = :old.RULE_SETUP_MASTER_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete MSO_RULE_SETUP_MASTER because MSO_PROJECT_RULE_SETUP_ASSOC exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_MSO_RULE_SETUP_MASTER AFTER UPDATE ON MSO_RULE_SETUP_MASTER for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on MSO_RULE_SETUP_MASTER 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* MSO_RULE_SETUP_MASTER  MSO_SHARD_FIX_MASTER_RULES on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="0005b6f0", PARENT_OWNER="", PARENT_TABLE="MSO_RULE_SETUP_MASTER"
    CHILD_OWNER="", CHILD_TABLE="MSO_SHARD_FIX_MASTER_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_144", FK_COLUMNS="RULE_SETUP_MASTER_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.RULE_SETUP_MASTER_ID <> :new.RULE_SETUP_MASTER_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM MSO_SHARD_FIX_MASTER_RULES
      WHERE
        /*  %JoinFKPK(MSO_SHARD_FIX_MASTER_RULES,:%Old," = "," AND") */
        MSO_SHARD_FIX_MASTER_RULES.RULE_SETUP_MASTER_ID = :old.RULE_SETUP_MASTER_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update MSO_RULE_SETUP_MASTER because MSO_SHARD_FIX_MASTER_RULES exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* MSO_RULE_SETUP_MASTER  MSO_DEPT_CONST_MASTER_RULES on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="MSO_RULE_SETUP_MASTER"
    CHILD_OWNER="", CHILD_TABLE="MSO_DEPT_CONST_MASTER_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_142", FK_COLUMNS="RULE_SETUP_MASTER_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.RULE_SETUP_MASTER_ID <> :new.RULE_SETUP_MASTER_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM MSO_DEPT_CONST_MASTER_RULES
      WHERE
        /*  %JoinFKPK(MSO_DEPT_CONST_MASTER_RULES,:%Old," = "," AND") */
        MSO_DEPT_CONST_MASTER_RULES.RULE_SETUP_MASTER_ID = :old.RULE_SETUP_MASTER_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update MSO_RULE_SETUP_MASTER because MSO_DEPT_CONST_MASTER_RULES exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* MSO_RULE_SETUP_MASTER  MSO_SEQ_MASTER_RULES on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="MSO_RULE_SETUP_MASTER"
    CHILD_OWNER="", CHILD_TABLE="MSO_SEQ_MASTER_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_141", FK_COLUMNS="RULE_SETUP_MASTER_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.RULE_SETUP_MASTER_ID <> :new.RULE_SETUP_MASTER_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM MSO_SEQ_MASTER_RULES
      WHERE
        /*  %JoinFKPK(MSO_SEQ_MASTER_RULES,:%Old," = "," AND") */
        MSO_SEQ_MASTER_RULES.RULE_SETUP_MASTER_ID = :old.RULE_SETUP_MASTER_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update MSO_RULE_SETUP_MASTER because MSO_SEQ_MASTER_RULES exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* MSO_RULE_SETUP_MASTER  MSO_PROJECT_RULE_SETUP_ASSOC on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="MSO_RULE_SETUP_MASTER"
    CHILD_OWNER="", CHILD_TABLE="MSO_PROJECT_RULE_SETUP_ASSOC"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_140", FK_COLUMNS="RULE_SETUP_MASTER_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.RULE_SETUP_MASTER_ID <> :new.RULE_SETUP_MASTER_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM MSO_PROJECT_RULE_SETUP_ASSOC
      WHERE
        /*  %JoinFKPK(MSO_PROJECT_RULE_SETUP_ASSOC,:%Old," = "," AND") */
        MSO_PROJECT_RULE_SETUP_ASSOC.RULE_SETUP_MASTER_ID = :old.RULE_SETUP_MASTER_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update MSO_RULE_SETUP_MASTER because MSO_PROJECT_RULE_SETUP_ASSOC exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER tI_MSO_SEQ_MASTER_RULES BEFORE INSERT ON MSO_SEQ_MASTER_RULES for each row
-- ERwin Builtin Trigger
-- INSERT trigger on MSO_SEQ_MASTER_RULES 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* MSO_RULE_SETUP_MASTER  MSO_SEQ_MASTER_RULES on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00026936", PARENT_OWNER="", PARENT_TABLE="MSO_RULE_SETUP_MASTER"
    CHILD_OWNER="", CHILD_TABLE="MSO_SEQ_MASTER_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_141", FK_COLUMNS="RULE_SETUP_MASTER_ID" */
    SELECT count(*) INTO NUMROWS
      FROM MSO_RULE_SETUP_MASTER
      WHERE
        /* %JoinFKPK(:%New,MSO_RULE_SETUP_MASTER," = "," AND") */
        :new.RULE_SETUP_MASTER_ID = MSO_RULE_SETUP_MASTER.RULE_SETUP_MASTER_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert MSO_SEQ_MASTER_RULES because MSO_RULE_SETUP_MASTER does not exist.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* BASIC_DEPARTMENT  MSO_SEQ_MASTER_RULES on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BASIC_DEPARTMENT"
    CHILD_OWNER="", CHILD_TABLE="MSO_SEQ_MASTER_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_30", FK_COLUMNS="DEPARTMENT_ID" */
    SELECT count(*) INTO NUMROWS
      FROM BASIC_DEPARTMENT
      WHERE
        /* %JoinFKPK(:%New,BASIC_DEPARTMENT," = "," AND") */
        :new.DEPARTMENT_ID = BASIC_DEPARTMENT.DEPARTMENT_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert MSO_SEQ_MASTER_RULES because BASIC_DEPARTMENT does not exist.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_MSO_SEQ_MASTER_RULES AFTER UPDATE ON MSO_SEQ_MASTER_RULES for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on MSO_SEQ_MASTER_RULES 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* MSO_RULE_SETUP_MASTER  MSO_SEQ_MASTER_RULES on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="000262d3", PARENT_OWNER="", PARENT_TABLE="MSO_RULE_SETUP_MASTER"
    CHILD_OWNER="", CHILD_TABLE="MSO_SEQ_MASTER_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_141", FK_COLUMNS="RULE_SETUP_MASTER_ID" */
  SELECT count(*) INTO NUMROWS
    FROM MSO_RULE_SETUP_MASTER
    WHERE
      /* %JoinFKPK(:%New,MSO_RULE_SETUP_MASTER," = "," AND") */
      :new.RULE_SETUP_MASTER_ID = MSO_RULE_SETUP_MASTER.RULE_SETUP_MASTER_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update MSO_SEQ_MASTER_RULES because MSO_RULE_SETUP_MASTER does not exist.'
    );
  END IF;

  /* ERwin Builtin Trigger */
  /* BASIC_DEPARTMENT  MSO_SEQ_MASTER_RULES on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BASIC_DEPARTMENT"
    CHILD_OWNER="", CHILD_TABLE="MSO_SEQ_MASTER_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_30", FK_COLUMNS="DEPARTMENT_ID" */
  SELECT count(*) INTO NUMROWS
    FROM BASIC_DEPARTMENT
    WHERE
      /* %JoinFKPK(:%New,BASIC_DEPARTMENT," = "," AND") */
      :new.DEPARTMENT_ID = BASIC_DEPARTMENT.DEPARTMENT_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update MSO_SEQ_MASTER_RULES because BASIC_DEPARTMENT does not exist.'
    );
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER tI_MSO_DEPT_CONST_MASTER_RULES BEFORE INSERT ON MSO_DEPT_CONST_MASTER_RULES for each row
-- ERwin Builtin Trigger
-- INSERT trigger on MSO_DEPT_CONST_MASTER_RULES 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* MSO_RULE_SETUP_MASTER  MSO_DEPT_CONST_MASTER_RULES on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="000265be", PARENT_OWNER="", PARENT_TABLE="MSO_RULE_SETUP_MASTER"
    CHILD_OWNER="", CHILD_TABLE="MSO_DEPT_CONST_MASTER_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_142", FK_COLUMNS="RULE_SETUP_MASTER_ID" */
    SELECT count(*) INTO NUMROWS
      FROM MSO_RULE_SETUP_MASTER
      WHERE
        /* %JoinFKPK(:%New,MSO_RULE_SETUP_MASTER," = "," AND") */
        :new.RULE_SETUP_MASTER_ID = MSO_RULE_SETUP_MASTER.RULE_SETUP_MASTER_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert MSO_DEPT_CONST_MASTER_RULES because MSO_RULE_SETUP_MASTER does not exist.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* BASIC_DEPARTMENT  MSO_DEPT_CONST_MASTER_RULES on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BASIC_DEPARTMENT"
    CHILD_OWNER="", CHILD_TABLE="MSO_DEPT_CONST_MASTER_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_13", FK_COLUMNS="DEPARTMENT_ID" */
    SELECT count(*) INTO NUMROWS
      FROM BASIC_DEPARTMENT
      WHERE
        /* %JoinFKPK(:%New,BASIC_DEPARTMENT," = "," AND") */
        :new.DEPARTMENT_ID = BASIC_DEPARTMENT.DEPARTMENT_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert MSO_DEPT_CONST_MASTER_RULES because BASIC_DEPARTMENT does not exist.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_MSO_DEPT_CONST_MASTER_RULES AFTER UPDATE ON MSO_DEPT_CONST_MASTER_RULES for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on MSO_DEPT_CONST_MASTER_RULES 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* MSO_RULE_SETUP_MASTER  MSO_DEPT_CONST_MASTER_RULES on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="000274c1", PARENT_OWNER="", PARENT_TABLE="MSO_RULE_SETUP_MASTER"
    CHILD_OWNER="", CHILD_TABLE="MSO_DEPT_CONST_MASTER_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_142", FK_COLUMNS="RULE_SETUP_MASTER_ID" */
  SELECT count(*) INTO NUMROWS
    FROM MSO_RULE_SETUP_MASTER
    WHERE
      /* %JoinFKPK(:%New,MSO_RULE_SETUP_MASTER," = "," AND") */
      :new.RULE_SETUP_MASTER_ID = MSO_RULE_SETUP_MASTER.RULE_SETUP_MASTER_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update MSO_DEPT_CONST_MASTER_RULES because MSO_RULE_SETUP_MASTER does not exist.'
    );
  END IF;

  /* ERwin Builtin Trigger */
  /* BASIC_DEPARTMENT  MSO_DEPT_CONST_MASTER_RULES on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BASIC_DEPARTMENT"
    CHILD_OWNER="", CHILD_TABLE="MSO_DEPT_CONST_MASTER_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_13", FK_COLUMNS="DEPARTMENT_ID" */
  SELECT count(*) INTO NUMROWS
    FROM BASIC_DEPARTMENT
    WHERE
      /* %JoinFKPK(:%New,BASIC_DEPARTMENT," = "," AND") */
      :new.DEPARTMENT_ID = BASIC_DEPARTMENT.DEPARTMENT_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update MSO_DEPT_CONST_MASTER_RULES because BASIC_DEPARTMENT does not exist.'
    );
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_MSO_PROJECT_RULE_SETUP_ASSO AFTER DELETE ON MSO_PROJECT_RULE_SETUP_ASSOC for each row
-- ERwin Builtin Trigger
-- DELETE trigger on MSO_PROJECT_RULE_SETUP_ASSOC 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* MSO_PROJECT_RULE_SETUP_ASSOC  MSO_INSTANCE on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="0000fabc", PARENT_OWNER="", PARENT_TABLE="MSO_PROJECT_RULE_SETUP_ASSOC"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_152", FK_COLUMNS="PROJ_RULE_SETUP_ID" */
    SELECT count(*) INTO NUMROWS
      FROM MSO_INSTANCE
      WHERE
        /*  %JoinFKPK(MSO_INSTANCE,:%Old," = "," AND") */
        MSO_INSTANCE.PROJ_RULE_SETUP_ID = :old.PROJ_RULE_SETUP_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete MSO_PROJECT_RULE_SETUP_ASSOC because MSO_INSTANCE exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tI_MSO_PROJECT_RULE_SETUP_ASSO BEFORE INSERT ON MSO_PROJECT_RULE_SETUP_ASSOC for each row
-- ERwin Builtin Trigger
-- INSERT trigger on MSO_PROJECT_RULE_SETUP_ASSOC 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* MSO_RULE_SETUP_MASTER  MSO_PROJECT_RULE_SETUP_ASSOC on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00024afd", PARENT_OWNER="", PARENT_TABLE="MSO_RULE_SETUP_MASTER"
    CHILD_OWNER="", CHILD_TABLE="MSO_PROJECT_RULE_SETUP_ASSOC"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_140", FK_COLUMNS="RULE_SETUP_MASTER_ID" */
    SELECT count(*) INTO NUMROWS
      FROM MSO_RULE_SETUP_MASTER
      WHERE
        /* %JoinFKPK(:%New,MSO_RULE_SETUP_MASTER," = "," AND") */
        :new.RULE_SETUP_MASTER_ID = MSO_RULE_SETUP_MASTER.RULE_SETUP_MASTER_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert MSO_PROJECT_RULE_SETUP_ASSOC because MSO_RULE_SETUP_MASTER does not exist.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* MSO_PROJ  MSO_PROJECT_RULE_SETUP_ASSOC on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="MSO_PROJ"
    CHILD_OWNER="", CHILD_TABLE="MSO_PROJECT_RULE_SETUP_ASSOC"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_139", FK_COLUMNS="MSO_PROJ_ID" */
    SELECT count(*) INTO NUMROWS
      FROM MSO_PROJ
      WHERE
        /* %JoinFKPK(:%New,MSO_PROJ," = "," AND") */
        :new.MSO_PROJ_ID = MSO_PROJ.MSO_PROJ_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert MSO_PROJECT_RULE_SETUP_ASSOC because MSO_PROJ does not exist.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_MSO_PROJECT_RULE_SETUP_ASSO AFTER UPDATE ON MSO_PROJECT_RULE_SETUP_ASSOC for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on MSO_PROJECT_RULE_SETUP_ASSOC 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* MSO_PROJECT_RULE_SETUP_ASSOC  MSO_INSTANCE on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="0003a48d", PARENT_OWNER="", PARENT_TABLE="MSO_PROJECT_RULE_SETUP_ASSOC"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_152", FK_COLUMNS="PROJ_RULE_SETUP_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.PROJ_RULE_SETUP_ID <> :new.PROJ_RULE_SETUP_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM MSO_INSTANCE
      WHERE
        /*  %JoinFKPK(MSO_INSTANCE,:%Old," = "," AND") */
        MSO_INSTANCE.PROJ_RULE_SETUP_ID = :old.PROJ_RULE_SETUP_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update MSO_PROJECT_RULE_SETUP_ASSOC because MSO_INSTANCE exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* MSO_RULE_SETUP_MASTER  MSO_PROJECT_RULE_SETUP_ASSOC on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="MSO_RULE_SETUP_MASTER"
    CHILD_OWNER="", CHILD_TABLE="MSO_PROJECT_RULE_SETUP_ASSOC"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_140", FK_COLUMNS="RULE_SETUP_MASTER_ID" */
  SELECT count(*) INTO NUMROWS
    FROM MSO_RULE_SETUP_MASTER
    WHERE
      /* %JoinFKPK(:%New,MSO_RULE_SETUP_MASTER," = "," AND") */
      :new.RULE_SETUP_MASTER_ID = MSO_RULE_SETUP_MASTER.RULE_SETUP_MASTER_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update MSO_PROJECT_RULE_SETUP_ASSOC because MSO_RULE_SETUP_MASTER does not exist.'
    );
  END IF;

  /* ERwin Builtin Trigger */
  /* MSO_PROJ  MSO_PROJECT_RULE_SETUP_ASSOC on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="MSO_PROJ"
    CHILD_OWNER="", CHILD_TABLE="MSO_PROJECT_RULE_SETUP_ASSOC"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_139", FK_COLUMNS="MSO_PROJ_ID" */
  SELECT count(*) INTO NUMROWS
    FROM MSO_PROJ
    WHERE
      /* %JoinFKPK(:%New,MSO_PROJ," = "," AND") */
      :new.MSO_PROJ_ID = MSO_PROJ.MSO_PROJ_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update MSO_PROJECT_RULE_SETUP_ASSOC because MSO_PROJ does not exist.'
    );
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_MSO_USER_MASTER AFTER DELETE ON MSO_USER_MASTER for each row
-- ERwin Builtin Trigger
-- DELETE trigger on MSO_USER_MASTER 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* MSO_USER_MASTER  MSO_DATA_REQ on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="0001f5a5", PARENT_OWNER="", PARENT_TABLE="MSO_USER_MASTER"
    CHILD_OWNER="", CHILD_TABLE="MSO_DATA_REQ"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_149", FK_COLUMNS="UPDATE_ID" */
    SELECT count(*) INTO NUMROWS
      FROM MSO_DATA_REQ
      WHERE
        /*  %JoinFKPK(MSO_DATA_REQ,:%Old," = "," AND") */
        MSO_DATA_REQ.UPDATE_ID = :old.MSO_USER_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete MSO_USER_MASTER because MSO_DATA_REQ exists.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* MSO_USER_MASTER  MSO_DATA_REQ on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="MSO_USER_MASTER"
    CHILD_OWNER="", CHILD_TABLE="MSO_DATA_REQ"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_148", FK_COLUMNS="CREATE_ID" */
    SELECT count(*) INTO NUMROWS
      FROM MSO_DATA_REQ
      WHERE
        /*  %JoinFKPK(MSO_DATA_REQ,:%Old," = "," AND") */
        MSO_DATA_REQ.CREATE_ID = :old.MSO_USER_ID;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete MSO_USER_MASTER because MSO_DATA_REQ exists.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_MSO_USER_MASTER AFTER UPDATE ON MSO_USER_MASTER for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on MSO_USER_MASTER 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* MSO_USER_MASTER  MSO_DATA_REQ on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00024453", PARENT_OWNER="", PARENT_TABLE="MSO_USER_MASTER"
    CHILD_OWNER="", CHILD_TABLE="MSO_DATA_REQ"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_149", FK_COLUMNS="UPDATE_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.MSO_USER_ID <> :new.MSO_USER_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM MSO_DATA_REQ
      WHERE
        /*  %JoinFKPK(MSO_DATA_REQ,:%Old," = "," AND") */
        MSO_DATA_REQ.UPDATE_ID = :old.MSO_USER_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update MSO_USER_MASTER because MSO_DATA_REQ exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Trigger */
  /* MSO_USER_MASTER  MSO_DATA_REQ on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="MSO_USER_MASTER"
    CHILD_OWNER="", CHILD_TABLE="MSO_DATA_REQ"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_148", FK_COLUMNS="CREATE_ID" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.MSO_USER_ID <> :new.MSO_USER_ID
  THEN
    SELECT count(*) INTO NUMROWS
      FROM MSO_DATA_REQ
      WHERE
        /*  %JoinFKPK(MSO_DATA_REQ,:%Old," = "," AND") */
        MSO_DATA_REQ.CREATE_ID = :old.MSO_USER_ID;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update MSO_USER_MASTER because MSO_DATA_REQ exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER tI_MSO_SHARD_FIX_MASTER_RULES BEFORE INSERT ON MSO_SHARD_FIX_MASTER_RULES for each row
-- ERwin Builtin Trigger
-- INSERT trigger on MSO_SHARD_FIX_MASTER_RULES 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* MSO_RULE_SETUP_MASTER  MSO_SHARD_FIX_MASTER_RULES on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="0003db5c", PARENT_OWNER="", PARENT_TABLE="MSO_RULE_SETUP_MASTER"
    CHILD_OWNER="", CHILD_TABLE="MSO_SHARD_FIX_MASTER_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_144", FK_COLUMNS="RULE_SETUP_MASTER_ID" */
    SELECT count(*) INTO NUMROWS
      FROM MSO_RULE_SETUP_MASTER
      WHERE
        /* %JoinFKPK(:%New,MSO_RULE_SETUP_MASTER," = "," AND") */
        :new.RULE_SETUP_MASTER_ID = MSO_RULE_SETUP_MASTER.RULE_SETUP_MASTER_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert MSO_SHARD_FIX_MASTER_RULES because MSO_RULE_SETUP_MASTER does not exist.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* BASIC_DEPARTMENT  MSO_SHARD_FIX_MASTER_RULES on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BASIC_DEPARTMENT"
    CHILD_OWNER="", CHILD_TABLE="MSO_SHARD_FIX_MASTER_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_40", FK_COLUMNS="DEPARTMENT_ID" */
    SELECT count(*) INTO NUMROWS
      FROM BASIC_DEPARTMENT
      WHERE
        /* %JoinFKPK(:%New,BASIC_DEPARTMENT," = "," AND") */
        :new.DEPARTMENT_ID = BASIC_DEPARTMENT.DEPARTMENT_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert MSO_SHARD_FIX_MASTER_RULES because BASIC_DEPARTMENT does not exist.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* BASIC_DEPARTMENT  MSO_SHARD_FIX_MASTER_RULES on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BASIC_DEPARTMENT"
    CHILD_OWNER="", CHILD_TABLE="MSO_SHARD_FIX_MASTER_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_15", FK_COLUMNS="ADJ_DEPT_ID" */
    UPDATE MSO_SHARD_FIX_MASTER_RULES
      SET
        /* %SetFK(MSO_SHARD_FIX_MASTER_RULES,NULL) */
        MSO_SHARD_FIX_MASTER_RULES.ADJ_DEPT_ID = NULL
      WHERE
        NOT EXISTS (
          SELECT * FROM BASIC_DEPARTMENT
            WHERE
              /* %JoinFKPK(:%New,BASIC_DEPARTMENT," = "," AND") */
              :new.ADJ_DEPT_ID = BASIC_DEPARTMENT.DEPARTMENT_ID
        ) 
        /* %JoinPKPK(MSO_SHARD_FIX_MASTER_RULES,:%New," = "," AND") */
         and MSO_SHARD_FIX_MASTER_RULES.SHARED_FIX_MAST_RULE_ID = :new.SHARED_FIX_MAST_RULE_ID;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_MSO_SHARD_FIX_MASTER_RULES AFTER UPDATE ON MSO_SHARD_FIX_MASTER_RULES for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on MSO_SHARD_FIX_MASTER_RULES 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* MSO_RULE_SETUP_MASTER  MSO_SHARD_FIX_MASTER_RULES on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="0003b0fa", PARENT_OWNER="", PARENT_TABLE="MSO_RULE_SETUP_MASTER"
    CHILD_OWNER="", CHILD_TABLE="MSO_SHARD_FIX_MASTER_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_144", FK_COLUMNS="RULE_SETUP_MASTER_ID" */
  SELECT count(*) INTO NUMROWS
    FROM MSO_RULE_SETUP_MASTER
    WHERE
      /* %JoinFKPK(:%New,MSO_RULE_SETUP_MASTER," = "," AND") */
      :new.RULE_SETUP_MASTER_ID = MSO_RULE_SETUP_MASTER.RULE_SETUP_MASTER_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update MSO_SHARD_FIX_MASTER_RULES because MSO_RULE_SETUP_MASTER does not exist.'
    );
  END IF;

  /* ERwin Builtin Trigger */
  /* BASIC_DEPARTMENT  MSO_SHARD_FIX_MASTER_RULES on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BASIC_DEPARTMENT"
    CHILD_OWNER="", CHILD_TABLE="MSO_SHARD_FIX_MASTER_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_40", FK_COLUMNS="DEPARTMENT_ID" */
  SELECT count(*) INTO NUMROWS
    FROM BASIC_DEPARTMENT
    WHERE
      /* %JoinFKPK(:%New,BASIC_DEPARTMENT," = "," AND") */
      :new.DEPARTMENT_ID = BASIC_DEPARTMENT.DEPARTMENT_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update MSO_SHARD_FIX_MASTER_RULES because BASIC_DEPARTMENT does not exist.'
    );
  END IF;

  /* ERwin Builtin Trigger */
  /* BASIC_DEPARTMENT  MSO_SHARD_FIX_MASTER_RULES on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BASIC_DEPARTMENT"
    CHILD_OWNER="", CHILD_TABLE="MSO_SHARD_FIX_MASTER_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_15", FK_COLUMNS="ADJ_DEPT_ID" */
  SELECT count(*) INTO NUMROWS
    FROM BASIC_DEPARTMENT
    WHERE
      /* %JoinFKPK(:%New,BASIC_DEPARTMENT," = "," AND") */
      :new.ADJ_DEPT_ID = BASIC_DEPARTMENT.DEPARTMENT_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    :new.ADJ_DEPT_ID IS NOT NULL AND
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update MSO_SHARD_FIX_MASTER_RULES because BASIC_DEPARTMENT does not exist.'
    );
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER tI_MSO_INSTANCE_SHARED_FIXT_RU BEFORE INSERT ON MSO_INSTANCE_SHARED_FIXT_RULES for each row
-- ERwin Builtin Trigger
-- INSERT trigger on MSO_INSTANCE_SHARED_FIXT_RULES 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* MSO_INSTANCE  MSO_INSTANCE_SHARED_FIXT_RULES on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00039e1a", PARENT_OWNER="", PARENT_TABLE="MSO_INSTANCE"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE_SHARED_FIXT_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_155", FK_COLUMNS="INSTANCE_ID" */
    SELECT count(*) INTO NUMROWS
      FROM MSO_INSTANCE
      WHERE
        /* %JoinFKPK(:%New,MSO_INSTANCE," = "," AND") */
        :new.INSTANCE_ID = MSO_INSTANCE.INSTANCE_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert MSO_INSTANCE_SHARED_FIXT_RULES because MSO_INSTANCE does not exist.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* BASIC_DEPARTMENT  MSO_INSTANCE_SHARED_FIXT_RULES on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BASIC_DEPARTMENT"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE_SHARED_FIXT_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_58", FK_COLUMNS="DEPARTMENT_ID" */
    SELECT count(*) INTO NUMROWS
      FROM BASIC_DEPARTMENT
      WHERE
        /* %JoinFKPK(:%New,BASIC_DEPARTMENT," = "," AND") */
        :new.DEPARTMENT_ID = BASIC_DEPARTMENT.DEPARTMENT_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert MSO_INSTANCE_SHARED_FIXT_RULES because BASIC_DEPARTMENT does not exist.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* BASIC_DEPARTMENT  MSO_INSTANCE_SHARED_FIXT_RULES on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BASIC_DEPARTMENT"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE_SHARED_FIXT_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_39", FK_COLUMNS="ADJ_DEP_ID" */
    SELECT count(*) INTO NUMROWS
      FROM BASIC_DEPARTMENT
      WHERE
        /* %JoinFKPK(:%New,BASIC_DEPARTMENT," = "," AND") */
        :new.ADJ_DEP_ID = BASIC_DEPARTMENT.DEPARTMENT_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert MSO_INSTANCE_SHARED_FIXT_RULES because BASIC_DEPARTMENT does not exist.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_MSO_INSTANCE_SHARED_FIXT_RU AFTER UPDATE ON MSO_INSTANCE_SHARED_FIXT_RULES for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on MSO_INSTANCE_SHARED_FIXT_RULES 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* MSO_INSTANCE  MSO_INSTANCE_SHARED_FIXT_RULES on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="0003a14a", PARENT_OWNER="", PARENT_TABLE="MSO_INSTANCE"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE_SHARED_FIXT_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_155", FK_COLUMNS="INSTANCE_ID" */
  SELECT count(*) INTO NUMROWS
    FROM MSO_INSTANCE
    WHERE
      /* %JoinFKPK(:%New,MSO_INSTANCE," = "," AND") */
      :new.INSTANCE_ID = MSO_INSTANCE.INSTANCE_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update MSO_INSTANCE_SHARED_FIXT_RULES because MSO_INSTANCE does not exist.'
    );
  END IF;

  /* ERwin Builtin Trigger */
  /* BASIC_DEPARTMENT  MSO_INSTANCE_SHARED_FIXT_RULES on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BASIC_DEPARTMENT"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE_SHARED_FIXT_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_58", FK_COLUMNS="DEPARTMENT_ID" */
  SELECT count(*) INTO NUMROWS
    FROM BASIC_DEPARTMENT
    WHERE
      /* %JoinFKPK(:%New,BASIC_DEPARTMENT," = "," AND") */
      :new.DEPARTMENT_ID = BASIC_DEPARTMENT.DEPARTMENT_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update MSO_INSTANCE_SHARED_FIXT_RULES because BASIC_DEPARTMENT does not exist.'
    );
  END IF;

  /* ERwin Builtin Trigger */
  /* BASIC_DEPARTMENT  MSO_INSTANCE_SHARED_FIXT_RULES on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BASIC_DEPARTMENT"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE_SHARED_FIXT_RULES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_39", FK_COLUMNS="ADJ_DEP_ID" */
  SELECT count(*) INTO NUMROWS
    FROM BASIC_DEPARTMENT
    WHERE
      /* %JoinFKPK(:%New,BASIC_DEPARTMENT," = "," AND") */
      :new.ADJ_DEP_ID = BASIC_DEPARTMENT.DEPARTMENT_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update MSO_INSTANCE_SHARED_FIXT_RULES because BASIC_DEPARTMENT does not exist.'
    );
  END IF;


-- ERwin Builtin Trigger
END;
/


CREATE  TRIGGER tI_MSO_INSTANCE_FIXT_COMPBTY BEFORE INSERT ON MSO_INSTANCE_FIXT_COMPBTY for each row
-- ERwin Builtin Trigger
-- INSERT trigger on MSO_INSTANCE_FIXT_COMPBTY 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Trigger */
    /* MSO_INSTANCE  MSO_INSTANCE_FIXT_COMPBTY on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="0004c3d3", PARENT_OWNER="", PARENT_TABLE="MSO_INSTANCE"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE_FIXT_COMPBTY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_157", FK_COLUMNS="INSTANCE_ID" */
    SELECT count(*) INTO NUMROWS
      FROM MSO_INSTANCE
      WHERE
        /* %JoinFKPK(:%New,MSO_INSTANCE," = "," AND") */
        :new.INSTANCE_ID = MSO_INSTANCE.INSTANCE_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert MSO_INSTANCE_FIXT_COMPBTY because MSO_INSTANCE does not exist.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* IKB_FIXTURE_MASTER  MSO_INSTANCE_FIXT_COMPBTY on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="IKB_FIXTURE_MASTER"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE_FIXT_COMPBTY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_47", FK_COLUMNS="FORBID_FIXTURE_ID" */
    SELECT count(*) INTO NUMROWS
      FROM IKB_FIXTURE_MASTER
      WHERE
        /* %JoinFKPK(:%New,IKB_FIXTURE_MASTER," = "," AND") */
        :new.FORBID_FIXTURE_ID = IKB_FIXTURE_MASTER.FIXTURE_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert MSO_INSTANCE_FIXT_COMPBTY because IKB_FIXTURE_MASTER does not exist.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* IKB_FIXTURE_MASTER  MSO_INSTANCE_FIXT_COMPBTY on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="IKB_FIXTURE_MASTER"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE_FIXT_COMPBTY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_45", FK_COLUMNS="MAND_FIXTURE_ID" */
    SELECT count(*) INTO NUMROWS
      FROM IKB_FIXTURE_MASTER
      WHERE
        /* %JoinFKPK(:%New,IKB_FIXTURE_MASTER," = "," AND") */
        :new.MAND_FIXTURE_ID = IKB_FIXTURE_MASTER.FIXTURE_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert MSO_INSTANCE_FIXT_COMPBTY because IKB_FIXTURE_MASTER does not exist.'
      );
    END IF;

    /* ERwin Builtin Trigger */
    /* BASIC_DEPARTMENT  MSO_INSTANCE_FIXT_COMPBTY on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BASIC_DEPARTMENT"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE_FIXT_COMPBTY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_44", FK_COLUMNS="DEPARTMENT_ID" */
    SELECT count(*) INTO NUMROWS
      FROM BASIC_DEPARTMENT
      WHERE
        /* %JoinFKPK(:%New,BASIC_DEPARTMENT," = "," AND") */
        :new.DEPARTMENT_ID = BASIC_DEPARTMENT.DEPARTMENT_ID;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert MSO_INSTANCE_FIXT_COMPBTY because BASIC_DEPARTMENT does not exist.'
      );
    END IF;


-- ERwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_MSO_INSTANCE_FIXT_COMPBTY AFTER UPDATE ON MSO_INSTANCE_FIXT_COMPBTY for each row
-- ERwin Builtin Trigger
-- UPDATE trigger on MSO_INSTANCE_FIXT_COMPBTY 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Trigger */
  /* MSO_INSTANCE  MSO_INSTANCE_FIXT_COMPBTY on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="0004a27e", PARENT_OWNER="", PARENT_TABLE="MSO_INSTANCE"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE_FIXT_COMPBTY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_157", FK_COLUMNS="INSTANCE_ID" */
  SELECT count(*) INTO NUMROWS
    FROM MSO_INSTANCE
    WHERE
      /* %JoinFKPK(:%New,MSO_INSTANCE," = "," AND") */
      :new.INSTANCE_ID = MSO_INSTANCE.INSTANCE_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update MSO_INSTANCE_FIXT_COMPBTY because MSO_INSTANCE does not exist.'
    );
  END IF;

  /* ERwin Builtin Trigger */
  /* IKB_FIXTURE_MASTER  MSO_INSTANCE_FIXT_COMPBTY on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="IKB_FIXTURE_MASTER"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE_FIXT_COMPBTY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_47", FK_COLUMNS="FORBID_FIXTURE_ID" */
  SELECT count(*) INTO NUMROWS
    FROM IKB_FIXTURE_MASTER
    WHERE
      /* %JoinFKPK(:%New,IKB_FIXTURE_MASTER," = "," AND") */
      :new.FORBID_FIXTURE_ID = IKB_FIXTURE_MASTER.FIXTURE_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update MSO_INSTANCE_FIXT_COMPBTY because IKB_FIXTURE_MASTER does not exist.'
    );
  END IF;

  /* ERwin Builtin Trigger */
  /* IKB_FIXTURE_MASTER  MSO_INSTANCE_FIXT_COMPBTY on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="IKB_FIXTURE_MASTER"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE_FIXT_COMPBTY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_45", FK_COLUMNS="MAND_FIXTURE_ID" */
  SELECT count(*) INTO NUMROWS
    FROM IKB_FIXTURE_MASTER
    WHERE
      /* %JoinFKPK(:%New,IKB_FIXTURE_MASTER," = "," AND") */
      :new.MAND_FIXTURE_ID = IKB_FIXTURE_MASTER.FIXTURE_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update MSO_INSTANCE_FIXT_COMPBTY because IKB_FIXTURE_MASTER does not exist.'
    );
  END IF;

  /* ERwin Builtin Trigger */
  /* BASIC_DEPARTMENT  MSO_INSTANCE_FIXT_COMPBTY on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BASIC_DEPARTMENT"
    CHILD_OWNER="", CHILD_TABLE="MSO_INSTANCE_FIXT_COMPBTY"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_44", FK_COLUMNS="DEPARTMENT_ID" */
  SELECT count(*) INTO NUMROWS
    FROM BASIC_DEPARTMENT
    WHERE
      /* %JoinFKPK(:%New,BASIC_DEPARTMENT," = "," AND") */
      :new.DEPARTMENT_ID = BASIC_DEPARTMENT.DEPARTMENT_ID;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update MSO_INSTANCE_FIXT_COMPBTY because BASIC_DEPARTMENT does not exist.'
    );
  END IF;


-- ERwin Builtin Trigger
END;
/

